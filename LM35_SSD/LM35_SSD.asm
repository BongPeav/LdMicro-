;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F876 is the LDmicro target processor.
	LIST    p=PIC16F876
#include P16F876.inc
	__CONFIG 0x3F72
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000138	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; TABLE char7seg[129]
l_000008: movlw	 0x00             	  ; (OP_MOVLW, ((addrOfTableRoutine + TABLE_CALC) >> 8) & 0xFF)
          addwf	 0x23            , 0	  ; (OP_ADDWF, Scratch1, DEST_W)
i_00000a: movwf	 0x0A            	  ; (OP_MOVWF, REG_PCLATH)
          movlw	 0x10             	  ; (OP_MOVLW, (addrOfTableRoutine + TABLE_CALC) & 0xFF)
          addwf	 0x22            , 0	  ; (OP_ADDWF, Scratch0, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
i_00000e: incf	 0x0A            , 1	  ; (OP_INCF, REG_PCLATH, DEST_F)
          movwf	 0x02            	  ; (OP_MOVWF, REG_PCL)
    ; DATA's size is 1
i_000010: retlw	 0x3F             	  ; (OP_RETLW, a->data[i])
i_000011: retlw	 0x06             	  ; (OP_RETLW, a->data[i])
i_000012: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_000013: retlw	 0x4F             	  ; (OP_RETLW, a->data[i])
i_000014: retlw	 0x66             	  ; (OP_RETLW, a->data[i])
i_000015: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000016: retlw	 0x7D             	  ; (OP_RETLW, a->data[i])
i_000017: retlw	 0x07             	  ; (OP_RETLW, a->data[i])
i_000018: retlw	 0x7F             	  ; (OP_RETLW, a->data[i])
i_000019: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_00001a: retlw	 0x77             	  ; (OP_RETLW, a->data[i])
i_00001b: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_00001c: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00001d: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_00001e: retlw	 0x79             	  ; (OP_RETLW, a->data[i])
i_00001f: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000020: retlw	 0xBF             	  ; (OP_RETLW, a->data[i])
i_000021: retlw	 0x86             	  ; (OP_RETLW, a->data[i])
i_000022: retlw	 0xDB             	  ; (OP_RETLW, a->data[i])
i_000023: retlw	 0xCF             	  ; (OP_RETLW, a->data[i])
i_000024: retlw	 0xE6             	  ; (OP_RETLW, a->data[i])
i_000025: retlw	 0xED             	  ; (OP_RETLW, a->data[i])
i_000026: retlw	 0xFD             	  ; (OP_RETLW, a->data[i])
i_000027: retlw	 0x87             	  ; (OP_RETLW, a->data[i])
i_000028: retlw	 0xFF             	  ; (OP_RETLW, a->data[i])
i_000029: retlw	 0xEF             	  ; (OP_RETLW, a->data[i])
i_00002a: retlw	 0xF7             	  ; (OP_RETLW, a->data[i])
i_00002b: retlw	 0xFC             	  ; (OP_RETLW, a->data[i])
i_00002c: retlw	 0xB9             	  ; (OP_RETLW, a->data[i])
i_00002d: retlw	 0xDE             	  ; (OP_RETLW, a->data[i])
i_00002e: retlw	 0xF9             	  ; (OP_RETLW, a->data[i])
i_00002f: retlw	 0xF1             	  ; (OP_RETLW, a->data[i])
i_000030: retlw	 0x00             	  ; (OP_RETLW, a->data[i])
i_000031: retlw	 0xB0             	  ; (OP_RETLW, a->data[i])
i_000032: retlw	 0x22             	  ; (OP_RETLW, a->data[i])
i_000033: retlw	 0x4E             	  ; (OP_RETLW, a->data[i])
i_000034: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000035: retlw	 0xD2             	  ; (OP_RETLW, a->data[i])
i_000036: retlw	 0xDA             	  ; (OP_RETLW, a->data[i])
i_000037: retlw	 0x20             	  ; (OP_RETLW, a->data[i])
i_000038: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_000039: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00003a: retlw	 0x72             	  ; (OP_RETLW, a->data[i])
i_00003b: retlw	 0x70             	  ; (OP_RETLW, a->data[i])
i_00003c: retlw	 0x0C             	  ; (OP_RETLW, a->data[i])
i_00003d: retlw	 0x40             	  ; (OP_RETLW, a->data[i])
i_00003e: retlw	 0x80             	  ; (OP_RETLW, a->data[i])
i_00003f: retlw	 0x52             	  ; (OP_RETLW, a->data[i])
i_000040: retlw	 0x3F             	  ; (OP_RETLW, a->data[i])
i_000041: retlw	 0x06             	  ; (OP_RETLW, a->data[i])
i_000042: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_000043: retlw	 0x4F             	  ; (OP_RETLW, a->data[i])
i_000044: retlw	 0x66             	  ; (OP_RETLW, a->data[i])
i_000045: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000046: retlw	 0x7D             	  ; (OP_RETLW, a->data[i])
i_000047: retlw	 0x07             	  ; (OP_RETLW, a->data[i])
i_000048: retlw	 0x7F             	  ; (OP_RETLW, a->data[i])
i_000049: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_00004a: retlw	 0x09             	  ; (OP_RETLW, a->data[i])
i_00004b: retlw	 0x0D             	  ; (OP_RETLW, a->data[i])
i_00004c: retlw	 0x61             	  ; (OP_RETLW, a->data[i])
i_00004d: retlw	 0x41             	  ; (OP_RETLW, a->data[i])
i_00004e: retlw	 0x43             	  ; (OP_RETLW, a->data[i])
i_00004f: retlw	 0xD3             	  ; (OP_RETLW, a->data[i])
i_000050: retlw	 0x9F             	  ; (OP_RETLW, a->data[i])
i_000051: retlw	 0x77             	  ; (OP_RETLW, a->data[i])
i_000052: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_000053: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_000054: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_000055: retlw	 0x79             	  ; (OP_RETLW, a->data[i])
i_000056: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000057: retlw	 0x3D             	  ; (OP_RETLW, a->data[i])
i_000058: retlw	 0x74             	  ; (OP_RETLW, a->data[i])
i_000059: retlw	 0x30             	  ; (OP_RETLW, a->data[i])
i_00005a: retlw	 0x1E             	  ; (OP_RETLW, a->data[i])
i_00005b: retlw	 0x75             	  ; (OP_RETLW, a->data[i])
i_00005c: retlw	 0x38             	  ; (OP_RETLW, a->data[i])
i_00005d: retlw	 0x55             	  ; (OP_RETLW, a->data[i])
i_00005e: retlw	 0x54             	  ; (OP_RETLW, a->data[i])
i_00005f: retlw	 0x5C             	  ; (OP_RETLW, a->data[i])
i_000060: retlw	 0x73             	  ; (OP_RETLW, a->data[i])
i_000061: retlw	 0x67             	  ; (OP_RETLW, a->data[i])
i_000062: retlw	 0x33             	  ; (OP_RETLW, a->data[i])
i_000063: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000064: retlw	 0x78             	  ; (OP_RETLW, a->data[i])
i_000065: retlw	 0x3E             	  ; (OP_RETLW, a->data[i])
i_000066: retlw	 0x1C             	  ; (OP_RETLW, a->data[i])
i_000067: retlw	 0x6A             	  ; (OP_RETLW, a->data[i])
i_000068: retlw	 0x76             	  ; (OP_RETLW, a->data[i])
i_000069: retlw	 0x6E             	  ; (OP_RETLW, a->data[i])
i_00006a: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_00006b: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00006c: retlw	 0x64             	  ; (OP_RETLW, a->data[i])
i_00006d: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00006e: retlw	 0x23             	  ; (OP_RETLW, a->data[i])
i_00006f: retlw	 0x08             	  ; (OP_RETLW, a->data[i])
i_000070: retlw	 0x20             	  ; (OP_RETLW, a->data[i])
i_000071: retlw	 0x5F             	  ; (OP_RETLW, a->data[i])
i_000072: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_000073: retlw	 0x58             	  ; (OP_RETLW, a->data[i])
i_000074: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_000075: retlw	 0x7B             	  ; (OP_RETLW, a->data[i])
i_000076: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000077: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_000078: retlw	 0x74             	  ; (OP_RETLW, a->data[i])
i_000079: retlw	 0x10             	  ; (OP_RETLW, a->data[i])
i_00007a: retlw	 0x0E             	  ; (OP_RETLW, a->data[i])
i_00007b: retlw	 0x75             	  ; (OP_RETLW, a->data[i])
i_00007c: retlw	 0x18             	  ; (OP_RETLW, a->data[i])
i_00007d: retlw	 0x55             	  ; (OP_RETLW, a->data[i])
i_00007e: retlw	 0x54             	  ; (OP_RETLW, a->data[i])
i_00007f: retlw	 0x5C             	  ; (OP_RETLW, a->data[i])
i_000080: retlw	 0x73             	  ; (OP_RETLW, a->data[i])
i_000081: retlw	 0x67             	  ; (OP_RETLW, a->data[i])
i_000082: retlw	 0x50             	  ; (OP_RETLW, a->data[i])
i_000083: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000084: retlw	 0x78             	  ; (OP_RETLW, a->data[i])
i_000085: retlw	 0x3E             	  ; (OP_RETLW, a->data[i])
i_000086: retlw	 0x1C             	  ; (OP_RETLW, a->data[i])
i_000087: retlw	 0x6A             	  ; (OP_RETLW, a->data[i])
i_000088: retlw	 0x76             	  ; (OP_RETLW, a->data[i])
i_000089: retlw	 0x6E             	  ; (OP_RETLW, a->data[i])
i_00008a: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_00008b: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00008c: retlw	 0x30             	  ; (OP_RETLW, a->data[i])
i_00008d: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00008e: retlw	 0x01             	  ; (OP_RETLW, a->data[i])
i_00008f: retlw	 0x00             	  ; (OP_RETLW, a->data[i])
i_000090: retlw	 0x63             	  ; (OP_RETLW, a->data[i])
    ; TABLE char7seg END
    ; MultiplyRoutine16x16=32 (2x2=4)
l_000091: clrf	 0x27            	  ; (OP_CLRF, result3)
          clrf	 0x26            	  ; (OP_CLRF, result2)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x10             	  ; (OP_MOVLW, 16)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_000098: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000a0	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x26            , 1	  ; (OP_ADDWF, result2, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x27            , 1	  ; (OP_INCF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
l_0000a0: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_000098	 	  ; (OP_GOTO, top)
i_0000a7: return	 	 	  ; (OP_RETURN)
    ; MultiplyRoutine24x16=40 (3x2=5)
          clrf	 0x28            	  ; (OP_CLRF, result4)
          clrf	 0x27            	  ; (OP_CLRF, result3)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x18             	  ; (OP_MOVLW, 24)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_0000b0: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000b8	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x23            , 0	  ; (OP_INCFSZ, multiplicand1, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, result4, DEST_F)
l_0000b8: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x28            , 1	  ; (OP_RRF, result4, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_0000b0	 	  ; (OP_GOTO, top)
i_0000c0: return	 	 	  ; (OP_RETURN)
    ; DivideRoutine16
l_0000c1: movf	 0x23            , 0 	  ; (OP_MOVF, dividend1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_0000cb	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_0000cb: btfss	 0x23            , 7	  ; (OP_BTFSS, dividend1, 7)
          goto	 l_0000d2	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_0000d2: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x11             	  ; (OP_MOVLW, 16 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_0000d7: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000f0	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_0000ee	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_0000ed: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000ee: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_0000ef: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000f0: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_0000f7: return	 	 	  ; (OP_RETURN, 0, 0)
    ; DivideRoutine24/16=24
          movf	 0x24            , 0 	  ; (OP_MOVF, dividend2, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
i_0000fb: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0000fc: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_000104	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_000104: btfss	 0x24            , 7	  ; (OP_BTFSS, dividend2, 7)
          goto	 l_00010e	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_00010e: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x19             	  ; (OP_MOVLW, 24 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_000113: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          rlf	 0x24            , 1	  ; (OP_RLF, dividend2, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_00012d	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_00012b	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_00012a: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012b: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_00012c: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012d: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_000137: return	 	 	  ; (OP_RETURN, 0, 0)
    ; Program Start
    ; Configure Timer1
l_000138: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0x71             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x71
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x02             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x2
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_000149: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_000149	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x87             	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x87
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xFD             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFD
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
    ; Clear Bit 7 - PORTs pull-ups are enabled by individual port latch values
          bcf	 0x01            , 7	  ; (OP_BCF, REG_OPTION, _RBPU)
l_00015f: bcf	 0x03            , 5	  ;  BS(0x80,0x0C) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Begin Of PLC Cycle
          btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_000164: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_000164	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; INIT VARS
    ; INT_IF_BIT_CLEAR $once_0_INIT_VARS
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_INIT_VARS
          goto	 l_00016c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_0_INIT_VARS
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_INIT_VARS
    ; INT_SET_VARIABLE_TO_LITERAL C0:=0x0(0)
    ; CopyLitToReg
          clrf	 0x33            	  ; (OP_CLRF, addr + i, 0, comment) ; C0(0x33):=0(0x0)
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
l_00016c: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T0 2000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000197	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T0 2
    ; CopyRegToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T0
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x26            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000181	 	  ; (OP_GOTO, notOverflow)
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x26            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000181	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000181: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000186	 	  ; (OP_GOTO, is0)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_000185: goto	 l_000188	 	  ; (OP_GOTO, isEnd)
l_000186: btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_000188: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00018b	 	  ; (OP_GOTO, ifThen)
i_00018a: goto	 l_00018d	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T0 overlap to  overflow to 
l_00018b: incf	 0x34            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T0
i_00018c: goto	 l_000193	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_00018d: clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x34):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_1_TCY_T0
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T0
          goto	 l_000192	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_1_TCY_T0
          bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_TCY_T0
i_000191: goto	 l_000193	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_TCY_T0
l_000192: bcf	 0x20            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_TCY_T0
    ; INT_IF_BIT_CLEAR $once_1_TCY_T0
l_000193: btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T0
          goto	 l_000196	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_000196: goto	 l_000198	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_000197: clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x34):=0(0x0)
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
l_000198: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001a0	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_2_ONE_SHOT_RISING_
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
          goto	 l_00019e	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_00019d: goto	 l_00019f	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_2_ONE_SHOT_RISING_
l_00019e: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
l_00019f: goto	 l_0001a1	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_2_ONE_SHOT_RISING_
l_0001a0: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
    ; ELEM_CTC
    ; INT_IF_BIT_SET $rung_top
l_0001a1: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001c5	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; INT_IF_BIT_CLEAR $once_3_CTC_C0
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_3_CTC_C0
          goto	 l_0001c4	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_3_CTC_C0
          bsf	 0x20            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_3_CTC_C0
    ; INT_INCREMENT_VARIABLE C0 overlap to  overflow to 
          incf	 0x33            , 1	  ; (OP_INCF, addr, DEST_F, name) ; C0
    ; INT_IF_GRT C0 4
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x33            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x33            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0001b8	 	  ; (OP_GOTO, notOverflow)
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x33            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0001b8	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0001b8: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001bd	 	  ; (OP_GOTO, is0)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0001bc: goto	 l_0001bf	 	  ; (OP_GOTO, isEnd)
l_0001bd: btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0001bf: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0001c2	 	  ; (OP_GOTO, ifThen)
i_0001c1: goto	 l_0001c4	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL C0:=0x0(0)
    ; CopyLitToReg
l_0001c2: clrf	 0x33            	  ; (OP_CLRF, addr + i, 0, comment) ; C0(0x33):=0(0x0)
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
l_0001c4: goto	 l_0001c6	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_3_CTC_C0
l_0001c5: bcf	 0x20            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_3_CTC_C0
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
l_0001c6: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001cb	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x86) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISB:=0x0(0)
    ; CopyLitToReg
          clrf	 0x06            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISB(0x86):=0(0x0)
l_0001cb: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001d1	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x87) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISC:=0xF0(240)
    ; CopyLitToReg
          movlw	 0xF0             	  ; (OP_MOVLW, lNow, 0, comment) ; #TRISC(0x87):=240(0xF0)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #TRISC(0x87):=240(0xF0)
l_0001d1: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T1 1000000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000208	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T1 1000
    ; CopyRegToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xE8             	  ; (OP_MOVLW, lNow, 0, comment) ; 1000
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1000
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 1000
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1000
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0001ef	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0001ef	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0001ef: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001f4	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0001f3: goto	 l_0001f6	 	  ; (OP_GOTO, isEnd)
l_0001f4: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0001f6: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0001f9	 	  ; (OP_GOTO, ifThen)
i_0001f8: goto	 l_0001fd	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T1 overlap to  overflow to 
l_0001f9: incf	 0x36            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T1
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x37            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; T1
i_0001fc: goto	 l_000204	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1:=0x0(0)
    ; CopyLitToReg
l_0001fd: clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; T1(0x36):=0(0x0)
          clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; T1(0x36):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_4_TCY_T1
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_4_TCY_T1
          goto	 l_000203	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_4_TCY_T1
          bsf	 0x20            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_4_TCY_T1
i_000202: goto	 l_000204	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_4_TCY_T1
l_000203: bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_4_TCY_T1
    ; INT_IF_BIT_CLEAR $once_4_TCY_T1
l_000204: btfsc	 0x20            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_4_TCY_T1
          goto	 l_000207	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_000207: goto	 l_00020a	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1:=0x0(0)
    ; CopyLitToReg
l_000208: clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; T1(0x36):=0(0x0)
          clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; T1(0x36):=0(0x0)
    ; ELEM_READ_ADC
    ; INT_IF_BIT_SET $rung_top
l_00020a: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000222	 	  ; (OP_GOTO, condFalse)
    ; INT_READ_ADC
          movlw	 0x81             	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x81
          movwf	 0x1F            	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x1F
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | (refs << 0)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (refs << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x23) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x21             	  ; (OP_MOVLW, cyclesToWait)
          movwf	 0x23            	  ; (OP_MOVWF, Scratch1)
l_000214: decfsz 0x23            , 1	  ; (OP_DECFSZ, Scratch1, DEST_F)
          goto	 l_000214	 	  ; (OP_GOTO, wait)
          bsf	 0x1F            , 2	  ; (OP_BSF, REG_ADCON0, goPos)
l_000217: btfsc	 0x1F            , 2	  ; (OP_BTFSC, REG_ADCON0, goPos)
          goto	 l_000217	 	  ; (OP_GOTO, spin)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESH, DEST_W)
          movwf	 0x39            	  ; (OP_MOVWF, addr1 + 1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9E) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESL, DEST_W)
          bcf	 0x03            , 5	  ;  BS(0x80,0x38) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movwf	 0x38            	  ; (OP_MOVWF, addr1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x9F
l_000222: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_PIECEWISE_LINEAR
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0002d7	 	  ; (OP_GOTO, condFalse)
    ; PWL 2
    ; INT_CLEAR_BIT $scratch
          bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES A0 301
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x2D             	  ; (OP_MOVLW, lNow, 0, comment) ; 301
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 301
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 301
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 301
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000241	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000241	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000241: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000246	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_000245: goto	 l_000248	 	  ; (OP_GOTO, isEnd)
l_000246: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_000248: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00024b	 	  ; (OP_GOTO, ifThen)
i_00024a: goto	 l_00024c	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_00024b: bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_00024c: btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00027e	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT result := A0 - 150; ''; ''
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x96             	  ; (OP_MOVLW, lNow, 0, comment) ; 150
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 150
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 150
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x3A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x3B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY result := result * 74
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x4A             	  ; (OP_MOVLW, lNow, 0, comment) ; 74
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 74
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 74
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
    ; INT_SET_VARIABLE_DIVIDE result := result / 150
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x96             	  ; (OP_MOVLW, lNow, 0, comment) ; 150
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 150
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 150
i_00026e: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00026f: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
    ; INT_SET_VARIABLE_ADD result := result + 73; ''; ''
    ; CopyLitToReg
          movlw	 0x49             	  ; (OP_MOVLW, lNow, 0, comment) ; 73
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 73
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 73
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x3A            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x3B            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 1
    ; INT_CLEAR_BIT $scratch
l_00027e: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES A0 151
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x97             	  ; (OP_MOVLW, lNow, 0, comment) ; 151
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 151
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 151
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_000290: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000291: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00029a	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00029a	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00029a: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00029f	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_00029e: goto	 l_0002a1	 	  ; (OP_GOTO, isEnd)
l_00029f: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0002a1: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002a4	 	  ; (OP_GOTO, ifThen)
i_0002a3: goto	 l_0002a5	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0002a4: bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0002a5: btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0002d7	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT result := A0 - 2; ''; ''
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; A0
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 2
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x3A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x3B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY result := result * 72
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x48             	  ; (OP_MOVLW, lNow, 0, comment) ; 72
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 72
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 72
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
    ; INT_SET_VARIABLE_DIVIDE result := result / 148
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x94             	  ; (OP_MOVLW, lNow, 0, comment) ; 148
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 148
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 148
i_0002c7: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002c8: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; result
    ; INT_SET_VARIABLE_ADD result := result + 1; ''; ''
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x3A            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x3B            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
l_0002d7: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_0002d8: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002d9: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_DIV
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0002ec	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0x64(100)
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x40):=100(0x64)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x40):=100(0x64)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x40):=100(0x64)
    ; INT_SET_VARIABLE_DIVIDE buf4 := result / $scratch2
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf4
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x43            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf4
    ; ] finish series
    ; 
    ; ======= START RUNG 6 =======
    ; INT_SET_BIT $rung_top
l_0002ec: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_0002ed: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002ee: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_DIV
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000301	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x40):=10(0xA)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE temp1 := result / $scratch2
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x44            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; temp1
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x45            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; temp1
    ; ] finish series
    ; 
    ; ======= START RUNG 7 =======
    ; INT_SET_BIT $rung_top
l_000301: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_000302: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000303: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_MOD
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000316	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x40):=10(0xA)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE buf3 := temp1 / $scratch2
    ; CopyRegToReg
          movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; temp1
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; temp1
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x28            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf3
          movf	 0x29            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf3
    ; ] finish series
    ; 
    ; ======= START RUNG 8 =======
    ; INT_SET_BIT $rung_top
l_000316: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_000317: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000318: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_MOD
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00032b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x40):=10(0xA)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE buf2 := result / $scratch2
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x28            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x48            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf2
          movf	 0x29            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x49            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf2
    ; ] finish series
    ; 
    ; ======= START RUNG 9 =======
    ; INT_SET_BIT $rung_top
l_00032b: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_00032c: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00032d: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_GRT
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000350	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LEQ result 30
    ; CopyLitToReg
          movlw	 0x1E             	  ; (OP_MOVLW, lNow, 0, comment) ; 30
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 30
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 30
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3B            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3A            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x3B            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x3B            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000345	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3B            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000345	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000345: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00034a	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_000349: goto	 l_00034c	 	  ; (OP_GOTO, isEnd)
l_00034a: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_00034c: btfss	 0x35            , 0	  ; (OP_BTFSS, addrO, bitO)
          goto	 l_00034f	 	  ; (OP_GOTO, ifThen)
i_00034e: goto	 l_000350	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_00034f: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Y0:=$rung_top
l_000350: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 10 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00037e	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES result 100
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; 100
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 100
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 100
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000373	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000373	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000373: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000378	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_000377: goto	 l_00037a	 	  ; (OP_GOTO, isEnd)
l_000378: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_00037a: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00037d	 	  ; (OP_GOTO, ifThen)
i_00037c: goto	 l_00037e	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_00037d: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
l_00037e: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000388	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          movf	 0x33            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x26            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000387	 	  ; (OP_GOTO, ifThen)
i_000386: goto	 l_000388	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000387: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_000388: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0003ef	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4A):=176(0xB0)
          movwf	 0x4A            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4A):=176(0xB0)
          clrf	 0x4B            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4A):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x42            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000399	 	  ; (OP_GOTO, ifEnd)
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4B            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000399	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf4:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; buf4(0x42):=128(0x80)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf4(0x42):=128(0x80)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; buf4(0x42):=128(0x80)
i_000398: goto	 l_0003e6	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf4 0
    ; CopyRegToReg
l_000399: movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0003b1	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0003b1	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0003b1: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0003b6	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0003b5: goto	 l_0003b8	 	  ; (OP_GOTO, isEnd)
l_0003b6: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0003b8: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0003bb	 	  ; (OP_GOTO, ifThen)
i_0003ba: goto	 l_0003bf	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf4:=0x20(32)
    ; CopyLitToReg
l_0003bb: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf4(0x42):=32(0x20)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf4(0x42):=32(0x20)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; buf4(0x42):=32(0x20)
i_0003be: goto	 l_0003e6	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf4 129
    ; CopyRegToReg
l_0003bf: movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0003d8	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0003d8	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0003d8: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0003dd	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0003dc: goto	 l_0003df	 	  ; (OP_GOTO, isEnd)
l_0003dd: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0003df: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0003e2	 	  ; (OP_GOTO, ifThen)
i_0003e1: goto	 l_0003e3	 	  ; (OP_GOTO, ifEnd)
l_0003e2: goto	 l_0003e6	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL buf4:=0x20(32)
    ; CopyLitToReg
l_0003e3: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf4(0x42):=32(0x20)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf4(0x42):=32(0x20)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; buf4(0x42):=32(0x20)
    ; Scratch0:1 := Index 'buf4'
    ; CopyRegToReg
l_0003e6: movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x4A            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x4B            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_0003ef: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003f0: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0003f4	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_0003f4: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0003f8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=1(0x1)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=1(0x1)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 11 =======
    ; INT_SET_BIT $rung_top
l_0003f8: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00041f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES result 10
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; result
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; 10
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 10
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 10
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000414	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000414	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000414: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000419	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_000418: goto	 l_00041b	 	  ; (OP_GOTO, isEnd)
l_000419: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_00041b: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00041e	 	  ; (OP_GOTO, ifThen)
i_00041d: goto	 l_00041f	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_00041e: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
l_00041f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000429	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          movf	 0x33            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x26            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000428	 	  ; (OP_GOTO, ifThen)
i_000427: goto	 l_000429	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000428: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_000429: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000490	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4A):=176(0xB0)
          movwf	 0x4A            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4A):=176(0xB0)
          clrf	 0x4B            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4A):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00043a	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4B            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00043a	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf3:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; buf3(0x46):=128(0x80)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf3(0x46):=128(0x80)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; buf3(0x46):=128(0x80)
i_000439: goto	 l_000487	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf3 0
    ; CopyRegToReg
l_00043a: movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000452	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000452	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000452: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000457	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_000456: goto	 l_000459	 	  ; (OP_GOTO, isEnd)
l_000457: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_000459: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00045c	 	  ; (OP_GOTO, ifThen)
i_00045b: goto	 l_000460	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf3:=0x20(32)
    ; CopyLitToReg
l_00045c: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf3(0x46):=32(0x20)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf3(0x46):=32(0x20)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; buf3(0x46):=32(0x20)
i_00045f: goto	 l_000487	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf3 129
    ; CopyRegToReg
l_000460: movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000479	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000479	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000479: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00047e	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_00047d: goto	 l_000480	 	  ; (OP_GOTO, isEnd)
l_00047e: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_000480: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000483	 	  ; (OP_GOTO, ifThen)
i_000482: goto	 l_000484	 	  ; (OP_GOTO, ifEnd)
l_000483: goto	 l_000487	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL buf3:=0x20(32)
    ; CopyLitToReg
l_000484: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf3(0x46):=32(0x20)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf3(0x46):=32(0x20)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; buf3(0x46):=32(0x20)
    ; Scratch0:1 := Index 'buf3'
    ; CopyRegToReg
l_000487: movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x4A            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x4B            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_000490: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000491: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000495	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000495: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000499	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x2(2)
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=2(0x2)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=2(0x2)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 12 =======
    ; INT_SET_BIT $rung_top
l_000499: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0004a4	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          movf	 0x33            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x26            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004a3	 	  ; (OP_GOTO, ifThen)
i_0004a2: goto	 l_0004a4	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0004a3: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_0004a4: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00050b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4A):=176(0xB0)
          movwf	 0x4A            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4A):=176(0xB0)
          clrf	 0x4B            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4A):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x48            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004b5	 	  ; (OP_GOTO, ifEnd)
          movf	 0x49            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4B            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004b5	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf2:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; buf2(0x48):=128(0x80)
          movwf	 0x48            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf2(0x48):=128(0x80)
          clrf	 0x49            	  ; (OP_CLRF, addr + i, 0, comment) ; buf2(0x48):=128(0x80)
i_0004b4: goto	 l_000502	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf2 0
    ; CopyRegToReg
l_0004b5: movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x49            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004cd	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004cd	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0004cd: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004d2	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0004d1: goto	 l_0004d4	 	  ; (OP_GOTO, isEnd)
l_0004d2: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0004d4: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0004d7	 	  ; (OP_GOTO, ifThen)
i_0004d6: goto	 l_0004db	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf2:=0x20(32)
    ; CopyLitToReg
l_0004d7: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf2(0x48):=32(0x20)
          movwf	 0x48            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf2(0x48):=32(0x20)
          clrf	 0x49            	  ; (OP_CLRF, addr + i, 0, comment) ; buf2(0x48):=32(0x20)
i_0004da: goto	 l_000502	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf2 129
    ; CopyRegToReg
l_0004db: movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x49            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x35            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004f4	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004f4	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0004f4: btfss	 0x35            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004f9	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0004f8: goto	 l_0004fb	 	  ; (OP_GOTO, isEnd)
l_0004f9: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0004fb: btfsc	 0x35            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0004fe	 	  ; (OP_GOTO, ifThen)
i_0004fd: goto	 l_0004ff	 	  ; (OP_GOTO, ifEnd)
l_0004fe: goto	 l_000502	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL buf2:=0x20(32)
    ; CopyLitToReg
l_0004ff: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf2(0x48):=32(0x20)
          movwf	 0x48            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf2(0x48):=32(0x20)
          clrf	 0x49            	  ; (OP_CLRF, addr + i, 0, comment) ; buf2(0x48):=32(0x20)
    ; Scratch0:1 := Index 'buf2'
    ; CopyRegToReg
l_000502: movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x49            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x4A            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x4B            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_00050b: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00050c: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000510	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000510: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000514	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x4(4)
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=4(0x4)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=4(0x4)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 13 =======
    ; INT_SET_BIT $rung_top
l_000514: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00051f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          movf	 0x33            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x26            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00051e	 	  ; (OP_GOTO, ifThen)
i_00051d: goto	 l_00051f	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_00051e: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_00051f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000523	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTB:=0x39(57)
    ; CopyLitToReg
          movlw	 0x39             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTB(0x6):=57(0x39)
          movwf	 0x06            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTB(0x6):=57(0x39)
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000523: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000526	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000526: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00052a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x8(8)
    ; CopyLitToReg
          movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=8(0x8)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=8(0x8)
    ; ] finish parallel
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
l_00052a: goto	 l_00015f	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_00052b: goto	 l_00052b	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 51
;|  1 | #PORTB                                            	|   1 byte  | 0x0006       |
;|  2 | #PORTC                                            	|   1 byte  | 0x0007       |
;|  4 | #TRISB                                            	|   1 byte  | 0x0086       |
;|  5 | #TRISC                                            	|   1 byte  | 0x0087       |
;|  7 | 148                                               	|   2 byte  | 0x003E       |
;|  8 | 150                                               	|   2 byte  | 0x003C       |
;| 15 | C0                                                	|   1 byte  | 0x0033       |
;| 20 | T0                                                	|   1 byte  | 0x0034       |
;| 21 | T1                                                	|   2 byte  | 0x0036       |
;| 26 | buf2                                              	|   2 byte  | 0x0048       |
;| 27 | buf3                                              	|   2 byte  | 0x0046       |
;| 28 | buf4                                              	|   2 byte  | 0x0042       |
;| 30 | char7seg                                          	| 129 byte  | 0x0008       |
;| 41 | result                                            	|   2 byte  | 0x003A       |
;| 43 | temp1                                             	|   2 byte  | 0x0044       |
;| 47 | A0                                                	|   2 byte  | 0x0038       |
;| 49 | $scratch2                                         	|   2 byte  | 0x0040       |
;| 50 | $scratch                                          	|   2 byte  | 0x004A       |

;|Internal Relays: 9
;|  0 | $once_0_INIT_VARS                                 	|   1 bit   | 0x0020       | 0     |
;|  1 | $rung_top                                         	|   1 bit   | 0x0020       | 1     |
;|  2 | $once_1_TCY_T0                                    	|   1 bit   | 0x0020       | 2     |
;|  3 | $once_2_ONE_SHOT_RISING_                          	|   1 bit   | 0x0020       | 3     |
;|  4 | $once_3_CTC_C0                                    	|   1 bit   | 0x0020       | 4     |
;|  5 | $once_4_TCY_T1                                    	|   1 bit   | 0x0020       | 5     |
;|  6 | $scratch                                          	|   1 bit   | 0x0020       | 6     |
;|  7 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0020       | 7     |
;|  8 | $overflow                                         	|   1 bit   | 0x0035       | 0     |

