;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F876 is the LDmicro target processor.
	LIST    p=PIC16F876
#include P16F876.inc
	__CONFIG 0x3F72
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000008	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; Program Start
    ; Configure Timer1
l_000008: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0x6A             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x6A
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x18             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x18
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_000019: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_000019	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x87             	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x87
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
    ; Clear Bit 7 - PORTs pull-ups are enabled by individual port latch values
          bcf	 0x01            , 7	  ; (OP_BCF, REG_OPTION, _RBPU)
l_00002f: bcf	 0x03            , 5	  ;  BS(0x80,0x0C) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Begin Of PLC Cycle
          btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_000034: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_000034	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00003d	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x86) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISB:=0x0(0)
    ; CopyLitToReg
          clrf	 0x06            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISB(0x86):=0(0x0)
l_00003d: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000042	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x87) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISC(0x87):=0(0x0)
l_000042: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00004c	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_0_ONE_SHOT_RISING_
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_0_ONE_SHOT_RISING_
          goto	 l_00004a	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_000049: goto	 l_00004b	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_0_ONE_SHOT_RISING_
l_00004a: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_ONE_SHOT_RISING_
l_00004b: goto	 l_00004d	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_0_ONE_SHOT_RISING_
l_00004c: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_0_ONE_SHOT_RISING_
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_00004d: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000051	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTB:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTB(0x6):=1(0x1)
          movwf	 0x06            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTB(0x6):=1(0x1)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000051: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000055	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=128(0x80)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=128(0x80)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
l_000055: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T0 20000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000080	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T0 2
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T0
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          bcf	 0x20            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x26            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00006a	 	  ; (OP_GOTO, notOverflow)
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x26            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00006a	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00006a: btfss	 0x20            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00006f	 	  ; (OP_GOTO, is0)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 6	  ; (OP_BCF, addrDest, bitDest)
i_00006e: goto	 l_000071	 	  ; (OP_GOTO, isEnd)
l_00006f: btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000071: btfsc	 0x20            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000074	 	  ; (OP_GOTO, ifThen)
i_000073: goto	 l_000076	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T0 overlap to  overflow to 
l_000074: incf	 0x33            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T0
i_000075: goto	 l_00007c	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_000076: clrf	 0x33            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x33):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_1_TCY_T0
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T0
          goto	 l_00007b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_1_TCY_T0
          bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_TCY_T0
i_00007a: goto	 l_00007c	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_TCY_T0
l_00007b: bcf	 0x20            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_TCY_T0
    ; INT_IF_BIT_CLEAR $once_1_TCY_T0
l_00007c: btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T0
          goto	 l_00007f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_00007f: goto	 l_000081	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_000080: clrf	 0x33            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x33):=0(0x0)
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
l_000081: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000089	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_2_ONE_SHOT_RISING_
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
          goto	 l_000087	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_000086: goto	 l_000088	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_2_ONE_SHOT_RISING_
l_000087: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
l_000088: goto	 l_00008a	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_2_ONE_SHOT_RISING_
l_000089: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
l_00008a: bcf	 0x20            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; ELEM_ROL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000097	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_ROL
    ; CopyRegToReg
          movf	 0x06            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; #PORTB
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x21            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
l_000091: rlf	 0x22            , 0	  ; (OP_RLF, addrA + sov1 - 1, DEST_W)
          rlf	 0x22            , 1	  ; (OP_RLF, addrA + i, DEST_F)
          decfsz 0x21            , 1	  ; (OP_DECFSZ, ScratchS, DEST_F)
          goto	 l_000091	 	  ; (OP_GOTO, loop)
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $Scratch0
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
    ; ELEM_ROR
    ; INT_IF_BIT_SET $rung_top
l_000097: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000a3	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_ROR
    ; CopyRegToReg
          movf	 0x07            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; #PORTC
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x21            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
l_00009d: rrf	 0x22            , 0	  ; (OP_RRF, addrA - sov1 + 1, DEST_W)
          rrf	 0x22            , 1	  ; (OP_RRF, addrA - i, DEST_F)
          decfsz 0x21            , 1	  ; (OP_DECFSZ, ScratchS, DEST_F)
          goto	 l_00009d	 	  ; (OP_GOTO, loop)
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $Scratch0
          movwf	 0x07            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTC
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_0000a3: btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 4	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_0000a7: goto	 l_00002f	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_0000a8: goto	 l_0000a8	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 9
;|  0 | #PORTB                                            	|   1 byte  | 0x0006       |
;|  1 | #TRISB                                            	|   1 byte  | 0x0086       |
;|  2 | T0                                                	|   1 byte  | 0x0033       |
;|  7 | #TRISC                                            	|   1 byte  | 0x0087       |
;|  8 | #PORTC                                            	|   1 byte  | 0x0007       |

;|Internal Relays: 7
;|  0 | $rung_top                                         	|   1 bit   | 0x0020       | 0     |
;|  1 | $once_0_ONE_SHOT_RISING_                          	|   1 bit   | 0x0020       | 1     |
;|  2 | $once_1_TCY_T0                                    	|   1 bit   | 0x0020       | 2     |
;|  3 | $once_2_ONE_SHOT_RISING_                          	|   1 bit   | 0x0020       | 3     |
;|  4 | $parOut_0                                         	|   1 bit   | 0x0020       | 4     |
;|  5 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0020       | 5     |
;|  6 | $overflow                                         	|   1 bit   | 0x0020       | 6     |

