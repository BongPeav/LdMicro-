;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F876 is the LDmicro target processor.
	LIST    p=PIC16F876
#include P16F876.inc
	__CONFIG 0x3F72
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000008	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; Program Start
    ; Configure Timer1
l_000008: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0x6A             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x6A
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x18             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x18
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_000019: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_000019	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x87             	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x87
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xBF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xBF
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
    ; Clear Bit 7 - PORTs pull-ups are enabled by individual port latch values
          bcf	 0x01            , 7	  ; (OP_BCF, REG_OPTION, _RBPU)
    ; UART setup
          movlw	 0x20             	  ; (REG_SPBRG, divisor & 0xFF) ; 0x20
          movwf	 0x19            	  ; (REG_SPBRG, divisor & 0xFF) ; 0x99
          movlw	 0x20             	  ; (REG_TXSTA, 1 << TXEN) ; 0x20
          movwf	 0x18            	  ; (REG_TXSTA, 1 << TXEN) ; 0x98
          bcf	 0x03            , 5	  ;  BS(0x80,0x18) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x90             	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x90
          movwf	 0x18            	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x18
    ; Begin Of PLC Cycle
l_000036: btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x33            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x33            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_00003a: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_00003a	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; 
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_UART_RECV_AVAIL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000045	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ruart:=$rung_top
l_000045: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Ruart
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Ruart
          goto	 l_00004d	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
l_00004d: bcf	 0x20            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_RECV
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_000069	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_000069	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL rcv:=0x0(0)
    ; CopyLitToReg
          clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; rcv(0x34):=0(0x0)
          clrf	 0x35            	  ; (OP_CLRF, addr + i, 0, comment) ; rcv(0x34):=0(0x0)
    ; INT_UART_RECV1
          btfss	 0x0C            , 5	  ; (OP_BTFSS, REG_PIR1, 5)
          goto	 l_000069	 	  ; (OP_GOTO, done)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movwf	 0x34            	  ; (OP_MOVWF, addr1)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, REG_RCSTA, 1)
          goto	 l_000065	 	  ; (OP_GOTO, yesError)
          btfsc	 0x18            , 2	  ; (OP_BTFSC, REG_RCSTA, 2)
          goto	 l_000065	 	  ; (OP_GOTO, yesError)
i_000064: goto	 l_000069	 	  ; (OP_GOTO, done)
l_000065: movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          bcf	 0x18            , 4	  ; (OP_BCF, REG_RCSTA, 4)
          bsf	 0x18            , 4	  ; (OP_BSF, REG_RCSTA, 4)
    ; INT_IF_BIT_SET $parThis_0
l_000069: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_00006c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
l_00006c: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_SEND
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_000078	 	  ; (OP_GOTO, condFalse)
l_000072: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_000072	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x34) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x34            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_UART_SEND_BUSY
    ; CopyNotBit
l_000078: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_000084	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_000084: btfsc	 0x20            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00008e	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL CR:=0xD(13)
    ; CopyLitToReg
          movlw	 0x0D             	  ; (OP_MOVLW, lNow, 0, comment) ; CR(0x36):=13(0xD)
          movwf	 0x36            	  ; (OP_MOVWF, addr + i, 0, comment) ; CR(0x36):=13(0xD)
          clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; CR(0x36):=13(0xD)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_00008e: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000093	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL LF:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; LF(0x38):=10(0xA)
          movwf	 0x38            	  ; (OP_MOVWF, addr + i, 0, comment) ; LF(0x38):=10(0xA)
          clrf	 0x39            	  ; (OP_CLRF, addr + i, 0, comment) ; LF(0x38):=10(0xA)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
l_000093: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Ruart
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Ruart
          goto	 l_000097	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; ELEM_SHIFT_REGISTER
    ; INT_IF_BIT_SET $rung_top
l_000097: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000a3	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_0_SHIFT_REGISTER_char
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_SHIFT_REGISTER_char
          goto	 l_0000a3	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE char2 := char1
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char1
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; char2
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char1
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; char2
    ; INT_SET_VARIABLE_TO_VARIABLE char1 := char0
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char0
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; char1
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char0
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; char1
    ; INT_COPY_BIT_TO_BIT $once_0_SHIFT_REGISTER_char:=$rung_top
l_0000a3: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000ad	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE char0 := rcv
    ; CopyRegToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; rcv
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; char0
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; rcv
          movwf	 0x3F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; char0
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
l_0000ad: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000bd	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; '0'
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; '0'
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; '0'
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x26            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0000bc	 	  ; (OP_GOTO, ifThen)
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x27            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0000bc	 	  ; (OP_GOTO, ifThen)
i_0000bb: goto	 l_0000bd	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0000bc: bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
l_0000bd: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000c5	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_1_ONE_SHOT_RISING_
          btfss	 0x20            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_1_ONE_SHOT_RISING_
          goto	 l_0000c3	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_0000c2: goto	 l_0000c4	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_1_ONE_SHOT_RISING_
l_0000c3: bsf	 0x20            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_ONE_SHOT_RISING_
l_0000c4: goto	 l_0000c6	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_ONE_SHOT_RISING_
l_0000c5: bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_ONE_SHOT_RISING_
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_1
l_0000c6: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_SEND
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_0000d3	 	  ; (OP_GOTO, condFalse)
l_0000cd: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0000cd	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x36) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x36            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_UART_SEND_BUSY
    ; CopyNotBit
l_0000d3: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_0000df	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_0000df: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_SEND
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_0000eb	 	  ; (OP_GOTO, condFalse)
l_0000e5: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0000e5	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x38) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x38            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_UART_SEND_BUSY
    ; CopyNotBit
l_0000eb: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_0000f7	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_0000f7: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_SEND
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_000103	 	  ; (OP_GOTO, condFalse)
l_0000fd: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0000fd	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x3A) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_UART_SEND_BUSY
    ; CopyNotBit
l_000103: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_00010f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_00010f: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_SEND
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_00011b	 	  ; (OP_GOTO, condFalse)
l_000115: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_000115	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x3C) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_UART_SEND_BUSY
    ; CopyNotBit
l_00011b: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_000127	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_1
l_000127: btfsc	 0x20            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 6	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_00012b: goto	 l_000036	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_00012c: goto	 l_00012c	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 23
;|  3 | CR                                                	|   2 byte  | 0x0036       |
;|  4 | LF                                                	|   2 byte  | 0x0038       |
;|  6 | char0                                             	|   2 byte  | 0x003E       |
;|  8 | char1                                             	|   2 byte  | 0x003C       |
;|  9 | char2                                             	|   2 byte  | 0x003A       |
;| 12 | rcv                                               	|   2 byte  | 0x0034       |

;|Internal Relays: 9
;|  0 | $rung_top                                         	|   1 bit   | 0x0020       | 0     |
;|  1 | Ruart                                             	|   1 bit   | 0x0020       | 1     |
;|  2 | $parOut_0                                         	|   1 bit   | 0x0020       | 2     |
;|  3 | $parThis_0                                        	|   1 bit   | 0x0020       | 3     |
;|  4 | $once_0_SHIFT_REGISTER_char                       	|   1 bit   | 0x0020       | 4     |
;|  5 | $once_1_ONE_SHOT_RISING_                          	|   1 bit   | 0x0020       | 5     |
;|  6 | $parOut_1                                         	|   1 bit   | 0x0020       | 6     |
;|  7 | $parThis_1                                        	|   1 bit   | 0x0020       | 7     |
;|  8 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0033       | 0     |

