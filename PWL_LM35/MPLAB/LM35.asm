;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F876 is the LDmicro target processor.
	LIST    p=PIC16F876
#include P16F876.inc
	__CONFIG 0x3F72
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_0000af	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; MultiplyRoutine16x16=32 (2x2=4)
l_000008: clrf	 0x27            	  ; (OP_CLRF, result3)
          clrf	 0x26            	  ; (OP_CLRF, result2)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x10             	  ; (OP_MOVLW, 16)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_00000f: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_000017	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x26            , 1	  ; (OP_ADDWF, result2, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x27            , 1	  ; (OP_INCF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
l_000017: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_00000f	 	  ; (OP_GOTO, top)
i_00001e: return	 	 	  ; (OP_RETURN)
    ; MultiplyRoutine24x16=40 (3x2=5)
          clrf	 0x28            	  ; (OP_CLRF, result4)
          clrf	 0x27            	  ; (OP_CLRF, result3)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x18             	  ; (OP_MOVLW, 24)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_000027: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_00002f	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x23            , 0	  ; (OP_INCFSZ, multiplicand1, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, result4, DEST_F)
l_00002f: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x28            , 1	  ; (OP_RRF, result4, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_000027	 	  ; (OP_GOTO, top)
i_000037: return	 	 	  ; (OP_RETURN)
    ; DivideRoutine16
l_000038: movf	 0x23            , 0 	  ; (OP_MOVF, dividend1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_000042	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_000042: btfss	 0x23            , 7	  ; (OP_BTFSS, dividend1, 7)
          goto	 l_000049	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_000049: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x11             	  ; (OP_MOVLW, 16 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_00004e: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_000067	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_000065	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_000064: goto	 l_00004e	 	  ; (OP_GOTO, loop)
l_000065: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_000066: goto	 l_00004e	 	  ; (OP_GOTO, loop)
l_000067: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_00006e: return	 	 	  ; (OP_RETURN, 0, 0)
    ; DivideRoutine24/16=24
          movf	 0x24            , 0 	  ; (OP_MOVF, dividend2, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
i_000072: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000073: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_00007b	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_00007b: btfss	 0x24            , 7	  ; (OP_BTFSS, dividend2, 7)
          goto	 l_000085	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_000085: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x19             	  ; (OP_MOVLW, 24 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_00008a: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          rlf	 0x24            , 1	  ; (OP_RLF, dividend2, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000a4	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_0000a2	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_0000a1: goto	 l_00008a	 	  ; (OP_GOTO, loop)
l_0000a2: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_0000a3: goto	 l_00008a	 	  ; (OP_GOTO, loop)
l_0000a4: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_0000ae: return	 	 	  ; (OP_RETURN, 0, 0)
    ; Program Start
    ; Configure Timer1
l_0000af: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0x6A             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x6A
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x18             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x18
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_0000c0: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_0000c0	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x87             	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x87
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFE             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFE
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xBF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xBF
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
    ; Clear Bit 7 - PORTs pull-ups are enabled by individual port latch values
          bcf	 0x01            , 7	  ; (OP_BCF, REG_OPTION, _RBPU)
    ; UART setup
          movlw	 0x20             	  ; (REG_SPBRG, divisor & 0xFF) ; 0x20
          movwf	 0x19            	  ; (REG_SPBRG, divisor & 0xFF) ; 0x99
          movlw	 0x20             	  ; (REG_TXSTA, 1 << TXEN) ; 0x20
          movwf	 0x18            	  ; (REG_TXSTA, 1 << TXEN) ; 0x98
          bcf	 0x03            , 5	  ;  BS(0x80,0x18) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x90             	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x90
          movwf	 0x18            	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x18
    ; Begin Of PLC Cycle
l_0000dd: btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_0000e1: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_0000e1	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; 
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000ea	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x86) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISB:=0x0(0)
    ; CopyLitToReg
          clrf	 0x06            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISB(0x86):=0(0x0)
l_0000ea: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T0 500000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000116	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T0 50
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T0
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x32             	  ; (OP_MOVLW, lNow, 0, comment) ; 50
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 50
          bcf	 0x34            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x26            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000100	 	  ; (OP_GOTO, notOverflow)
          movf	 0x22            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x26            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000100	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x34            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000100: btfss	 0x34            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000105	 	  ; (OP_GOTO, is0)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x34            , 0	  ; (OP_BCF, addrDest, bitDest)
i_000104: goto	 l_000107	 	  ; (OP_GOTO, isEnd)
l_000105: btfsc	 0x22            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x34            , 0	  ; (OP_BSF, addrDest, bitDest)
l_000107: btfsc	 0x34            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00010a	 	  ; (OP_GOTO, ifThen)
i_000109: goto	 l_00010c	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T0 overlap to  overflow to 
l_00010a: incf	 0x33            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T0
i_00010b: goto	 l_000112	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_00010c: clrf	 0x33            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x33):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_0_TCY_T0
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_TCY_T0
          goto	 l_000111	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_0_TCY_T0
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_TCY_T0
i_000110: goto	 l_000112	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_0_TCY_T0
l_000111: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_0_TCY_T0
    ; INT_IF_BIT_CLEAR $once_0_TCY_T0
l_000112: btfsc	 0x20            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_TCY_T0
          goto	 l_000115	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_000115: goto	 l_000117	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_000116: clrf	 0x33            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x33):=0(0x0)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ready:=$rung_top
l_000117: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Ready
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Ready
          goto	 l_00011f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_READ_ADC
    ; INT_IF_BIT_SET $rung_top
l_00011f: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000137	 	  ; (OP_GOTO, condFalse)
    ; INT_READ_ADC
          movlw	 0x81             	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x81
          movwf	 0x1F            	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x1F
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | (refs << 0)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (refs << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x23) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x21             	  ; (OP_MOVLW, cyclesToWait)
          movwf	 0x23            	  ; (OP_MOVWF, Scratch1)
l_000129: decfsz 0x23            , 1	  ; (OP_DECFSZ, Scratch1, DEST_F)
          goto	 l_000129	 	  ; (OP_GOTO, wait)
          bsf	 0x1F            , 2	  ; (OP_BSF, REG_ADCON0, goPos)
l_00012c: btfsc	 0x1F            , 2	  ; (OP_BTFSC, REG_ADCON0, goPos)
          goto	 l_00012c	 	  ; (OP_GOTO, spin)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESH, DEST_W)
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + 1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9E) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESL, DEST_W)
          bcf	 0x03            , 5	  ;  BS(0x80,0x35) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movwf	 0x35            	  ; (OP_MOVWF, addr1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x9F
l_000137: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_PIECEWISE_LINEAR
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001ea	 	  ; (OP_GOTO, condFalse)
    ; PWL 2
    ; INT_CLEAR_BIT $scratch
          bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES ADC0 301
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x2D             	  ; (OP_MOVLW, lNow, 0, comment) ; 301
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 301
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 301
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 301
          bcf	 0x34            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000156	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000156	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x34            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000156: btfss	 0x34            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00015b	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x34            , 0	  ; (OP_BCF, addrDest, bitDest)
i_00015a: goto	 l_00015d	 	  ; (OP_GOTO, isEnd)
l_00015b: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x34            , 0	  ; (OP_BSF, addrDest, bitDest)
l_00015d: btfsc	 0x34            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000160	 	  ; (OP_GOTO, ifThen)
i_00015f: goto	 l_000161	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000160: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000161: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000193	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT data := ADC0 - 150; ''; ''
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x37            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x96             	  ; (OP_MOVLW, lNow, 0, comment) ; 150
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 150
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 150
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x37            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x38            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY data := data * 75
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x37            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
    ; INT_SET_VARIABLE_DIVIDE data := data / 150
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x96             	  ; (OP_MOVLW, lNow, 0, comment) ; 150
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 150
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 150
i_000183: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000184: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x37            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
    ; INT_SET_VARIABLE_ADD data := data + 75; ''; ''
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x37            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x38            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 1
    ; INT_CLEAR_BIT $scratch
l_000193: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES ADC0 151
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x97             	  ; (OP_MOVLW, lNow, 0, comment) ; 151
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 151
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 151
          bcf	 0x34            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0001a5: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0001a6: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0001af	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0001af	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x34            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0001af: btfss	 0x34            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001b4	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x34            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0001b3: goto	 l_0001b6	 	  ; (OP_GOTO, isEnd)
l_0001b4: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x34            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0001b6: btfsc	 0x34            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0001b9	 	  ; (OP_GOTO, ifThen)
i_0001b8: goto	 l_0001ba	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0001b9: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0001ba: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0001ea	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT data := ADC0 - 0; ''; ''
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x37            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ADC0
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x37            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x38            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY data := data * 75
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x37            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
    ; INT_SET_VARIABLE_DIVIDE data := data / 150
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x96             	  ; (OP_MOVLW, lNow, 0, comment) ; 150
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 150
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 150
i_0001db: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0001dc: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x37            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; data
    ; INT_SET_VARIABLE_ADD data := data + 0; ''; ''
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x37            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x38            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
l_0001ea: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_0001eb: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0001ec: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Ready
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Ready
          goto	 l_0001f0	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_FORMATTED_STRING
    ; INT_IF_BIT_SET $rung_top
l_0001f0: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001f9	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_1_FMTD_STR_
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_FMTD_STR_
          goto	 l_0001f8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_1_FMTD_STR_
          bsf	 0x20            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_FMTD_STR_
    ; INT_SET_VARIABLE_TO_LITERAL $fmtd_0_seq:=0x0(0)
    ; CopyLitToReg
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_0_seq(0x3B):=0(0x0)
          clrf	 0x3C            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_0_seq(0x3B):=0(0x0)
    ; INT_SET_BIT $fmtd_3_doSend
          bsf	 0x20            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_3_doSend
l_0001f8: goto	 l_0001fa	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_FMTD_STR_
l_0001f9: bcf	 0x20            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_FMTD_STR_
    ; INT_SET_VARIABLE_TO_VARIABLE $seqScratch := $fmtd_0_seq
    ; CopyRegToReg
l_0001fa: movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
    ; INT_IF_LES $fmtd_0_seq 28
    ; CopyRegToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x1C             	  ; (OP_MOVLW, lNow, 0, comment) ; 28
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 28
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 28
          bcf	 0x34            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000217	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000217	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x34            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000217: btfss	 0x34            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00021c	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x34            , 0	  ; (OP_BCF, addrDest, bitDest)
i_00021b: goto	 l_00021e	 	  ; (OP_GOTO, isEnd)
l_00021c: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x34            , 0	  ; (OP_BSF, addrDest, bitDest)
l_00021e: btfsc	 0x34            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000221	 	  ; (OP_GOTO, ifThen)
i_000220: goto	 l_000222	 	  ; (OP_GOTO, ifEnd)
l_000221: goto	 l_000225	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
l_000222: movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x3D):=-1(0xFFFFFFFF)
          movwf	 0x3D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x3D):=-1(0xFFFFFFFF)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x3D):=-1(0xFFFFFFFF)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_000225: btfss	 0x20            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_000236	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_UART_SEND_READY
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_CLEAR $scratch
          btfsc	 0x20            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $scratch
          goto	 l_000236	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x3D):=-1(0xFFFFFFFF)
          movwf	 0x3D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x3D):=-1(0xFFFFFFFF)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x3D):=-1(0xFFFFFFFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x0(0)
    ; CopyLitToReg
l_000236: clrf	 0x3F            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=0(0x0)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=0(0x0)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000243	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000243	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x74(116)
    ; CopyLitToReg
          movlw	 0x74             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=116(0x74)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=116(0x74)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=116(0x74)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
l_000243: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=1(0x1)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=1(0x1)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=1(0x1)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000251	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000251	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x65(101)
    ; CopyLitToReg
          movlw	 0x65             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=101(0x65)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=101(0x65)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=101(0x65)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x2(2)
    ; CopyLitToReg
l_000251: movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=2(0x2)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=2(0x2)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=2(0x2)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00025f	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00025f	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6D(109)
    ; CopyLitToReg
          movlw	 0x6D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=109(0x6D)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=109(0x6D)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=109(0x6D)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x3(3)
    ; CopyLitToReg
l_00025f: movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=3(0x3)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=3(0x3)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=3(0x3)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00026d	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00026d	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x70(112)
    ; CopyLitToReg
          movlw	 0x70             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=112(0x70)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=112(0x70)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=112(0x70)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x4(4)
    ; CopyLitToReg
l_00026d: movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=4(0x4)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=4(0x4)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=4(0x4)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00027b	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00027b	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x65(101)
    ; CopyLitToReg
          movlw	 0x65             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=101(0x65)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=101(0x65)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=101(0x65)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x5(5)
    ; CopyLitToReg
l_00027b: movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=5(0x5)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=5(0x5)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=5(0x5)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000289	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000289	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x72(114)
    ; CopyLitToReg
          movlw	 0x72             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=114(0x72)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=114(0x72)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=114(0x72)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x6(6)
    ; CopyLitToReg
l_000289: movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=6(0x6)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=6(0x6)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=6(0x6)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000297	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000297	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x61(97)
    ; CopyLitToReg
          movlw	 0x61             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=97(0x61)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=97(0x61)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=97(0x61)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x7(7)
    ; CopyLitToReg
l_000297: movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=7(0x7)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=7(0x7)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=7(0x7)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002a5	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002a5	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x74(116)
    ; CopyLitToReg
          movlw	 0x74             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=116(0x74)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=116(0x74)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=116(0x74)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x8(8)
    ; CopyLitToReg
l_0002a5: movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=8(0x8)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=8(0x8)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=8(0x8)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002b3	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002b3	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x75(117)
    ; CopyLitToReg
          movlw	 0x75             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=117(0x75)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=117(0x75)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=117(0x75)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x9(9)
    ; CopyLitToReg
l_0002b3: movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=9(0x9)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=9(0x9)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=9(0x9)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002c1	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002c1	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x72(114)
    ; CopyLitToReg
          movlw	 0x72             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=114(0x72)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=114(0x72)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=114(0x72)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
l_0002c1: movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=10(0xA)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=10(0xA)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=10(0xA)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002cf	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002cf	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x65(101)
    ; CopyLitToReg
          movlw	 0x65             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=101(0x65)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=101(0x65)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=101(0x65)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB(11)
    ; CopyLitToReg
l_0002cf: movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=11(0xB)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=11(0xB)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=11(0xB)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002dd	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002dd	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=32(0x20)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xC(12)
    ; CopyLitToReg
l_0002dd: movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=12(0xC)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=12(0xC)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=12(0xC)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002eb	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002eb	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x66(102)
    ; CopyLitToReg
          movlw	 0x66             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=102(0x66)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=102(0x66)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=102(0x66)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xD(13)
    ; CopyLitToReg
l_0002eb: movlw	 0x0D             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=13(0xD)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=13(0xD)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=13(0xD)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002f9	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002f9	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x72(114)
    ; CopyLitToReg
          movlw	 0x72             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=114(0x72)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=114(0x72)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=114(0x72)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xE(14)
    ; CopyLitToReg
l_0002f9: movlw	 0x0E             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=14(0xE)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=14(0xE)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=14(0xE)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000307	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000307	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6F(111)
    ; CopyLitToReg
          movlw	 0x6F             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=111(0x6F)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=111(0x6F)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=111(0x6F)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xF(15)
    ; CopyLitToReg
l_000307: movlw	 0x0F             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=15(0xF)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=15(0xF)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=15(0xF)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000315	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000315	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6D(109)
    ; CopyLitToReg
          movlw	 0x6D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=109(0x6D)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=109(0x6D)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=109(0x6D)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x10(16)
    ; CopyLitToReg
l_000315: movlw	 0x10             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=16(0x10)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=16(0x10)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=16(0x10)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000323	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000323	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=32(0x20)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x11(17)
    ; CopyLitToReg
l_000323: movlw	 0x11             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=17(0x11)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=17(0x11)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=17(0x11)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000331	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000331	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x4C(76)
    ; CopyLitToReg
          movlw	 0x4C             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=76(0x4C)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=76(0x4C)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=76(0x4C)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x12(18)
    ; CopyLitToReg
l_000331: movlw	 0x12             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=18(0x12)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=18(0x12)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=18(0x12)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00033f	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00033f	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x4D(77)
    ; CopyLitToReg
          movlw	 0x4D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=77(0x4D)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=77(0x4D)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=77(0x4D)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x13(19)
    ; CopyLitToReg
l_00033f: movlw	 0x13             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=19(0x13)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=19(0x13)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=19(0x13)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00034d	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00034d	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x33(51)
    ; CopyLitToReg
          movlw	 0x33             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=51(0x33)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=51(0x33)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=51(0x33)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x14(20)
    ; CopyLitToReg
l_00034d: movlw	 0x14             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=20(0x14)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=20(0x14)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=20(0x14)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00035b	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00035b	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x35(53)
    ; CopyLitToReg
          movlw	 0x35             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=53(0x35)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=53(0x35)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=53(0x35)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x15(21)
    ; CopyLitToReg
l_00035b: movlw	 0x15             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=21(0x15)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=21(0x15)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=21(0x15)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000369	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000369	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x3A(58)
    ; CopyLitToReg
          movlw	 0x3A             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=58(0x3A)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=58(0x3A)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=58(0x3A)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x16(22)
    ; CopyLitToReg
l_000369: movlw	 0x16             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=22(0x16)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=22(0x16)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=22(0x16)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000377	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000377	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=32(0x20)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x17(23)
    ; CopyLitToReg
l_000377: movlw	 0x17             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=23(0x17)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=23(0x17)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=23(0x17)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000384	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000384	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000384: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0003ca	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE $fmtd_1_convertState := data
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x43            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_1_convertState
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; data
          movwf	 0x44            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_1_convertState
    ; INT_SET_BIT $fmtd_2_isLeadingZero
          bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x64(100)
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=100(0x64)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=100(0x64)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=100(0x64)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_1_convertState / $scratch
    ; CopyRegToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_0003a3: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003a4: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x40            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_1_convertState := $fmtd_1_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x3F            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x43            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x40            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x40            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x44            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=48(0x30)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=48(0x30)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x3F            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x41            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x40            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x40            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x42            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x41            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_0003bb: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003bc: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003c9	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x42            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003c9	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_2_isLeadingZero
          btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
          goto	 l_0003c8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=32(0x20)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
l_0003c8: goto	 l_0003ca	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_2_isLeadingZero
l_0003c9: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x18(24)
    ; CopyLitToReg
l_0003ca: movlw	 0x18             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=24(0x18)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=24(0x18)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=24(0x18)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003d7	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003d7	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0003d7: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000418	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=10(0xA)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=10(0xA)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_1_convertState / $scratch
    ; CopyRegToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_0003f1: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003f2: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x40            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_1_convertState := $fmtd_1_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x3F            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x43            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x40            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x40            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x44            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=48(0x30)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=48(0x30)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x3F            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x41            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x40            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x40            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x42            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x41            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_000409: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00040a: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000417	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x42            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000417	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_2_isLeadingZero
          btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
          goto	 l_000416	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=32(0x20)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=32(0x20)
l_000416: goto	 l_000418	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_2_isLeadingZero
l_000417: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x19(25)
    ; CopyLitToReg
l_000418: movlw	 0x19             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=25(0x19)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=25(0x19)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=25(0x19)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000425	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000425	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000425: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000455	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=1(0x1)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=1(0x1)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=1(0x1)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_1_convertState / $scratch
    ; CopyRegToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_00043f: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000440: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x40            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_1_convertState := $fmtd_1_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x3F            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x43            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x40            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x40            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x44            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=48(0x30)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=48(0x30)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x3F            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x41            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x40            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x40            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x42            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1A(26)
    ; CopyLitToReg
l_000455: movlw	 0x1A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=26(0x1A)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=26(0x1A)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=26(0x1A)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_00045a: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00045b: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000465	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000465	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xD(13)
    ; CopyLitToReg
          movlw	 0x0D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=13(0xD)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=13(0xD)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=13(0xD)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1B(27)
    ; CopyLitToReg
l_000465: movlw	 0x1B             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3F):=27(0x1B)
          movwf	 0x3F            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3F):=27(0x1B)
          clrf	 0x40            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3F):=27(0x1B)
    ; INT_IF_EQU
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000473	 	  ; (OP_GOTO, ifEnd)
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000473	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x41):=10(0xA)
          movwf	 0x41            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x41):=10(0xA)
          clrf	 0x42            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x41):=10(0xA)
    ; INT_IF_LES $seqScratch 0
    ; CopyRegToReg
l_000473: movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x34            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00048b	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00048b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x34            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00048b: btfss	 0x34            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000490	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x34            , 0	  ; (OP_BCF, addrDest, bitDest)
i_00048f: goto	 l_000492	 	  ; (OP_GOTO, isEnd)
l_000490: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x34            , 0	  ; (OP_BSF, addrDest, bitDest)
l_000492: btfsc	 0x34            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000495	 	  ; (OP_GOTO, ifThen)
i_000494: goto	 l_000496	 	  ; (OP_GOTO, ifEnd)
l_000495: goto	 l_0004a1	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_000496: btfss	 0x20            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_0004a1	 	  ; (OP_GOTO, condFalse)
l_000498: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_000498	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x41) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x41            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_INCREMENT_VARIABLE $fmtd_0_seq overlap to  overflow to 
          incf	 0x3B            , 1	  ; (OP_INCF, addr, DEST_F, name) ; $fmtd_0_seq
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x3C            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; $fmtd_0_seq
    ; INT_CLEAR_BIT $rung_top
l_0004a1: bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; INT_IF_LES $fmtd_0_seq 28
    ; CopyRegToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x1C             	  ; (OP_MOVLW, lNow, 0, comment) ; 28
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 28
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 28
          bcf	 0x34            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004bb	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004bb	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x34            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0004bb: btfss	 0x34            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004c0	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x34            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0004bf: goto	 l_0004c2	 	  ; (OP_GOTO, isEnd)
l_0004c0: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x34            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0004c2: btfsc	 0x34            , 0	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0004c5	 	  ; (OP_GOTO, ifThen)
i_0004c4: goto	 l_0004c9	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_0004c5: btfss	 0x20            , 5	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_0004c8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
l_0004c8: goto	 l_0004ca	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_3_doSend
l_0004c9: bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_3_doSend
    ; ] finish series
    ; 
    ; ======= START RUNG 6 =======
    ; INT_SET_BIT $rung_top
l_0004ca: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_GRT
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0004ed	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LEQ data 40
    ; CopyLitToReg
          movlw	 0x28             	  ; (OP_MOVLW, lNow, 0, comment) ; 40
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 40
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 40
          bcf	 0x34            , 0	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x38            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x37            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x38            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x38            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004e2	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x38            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004e2	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x34            , 0	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0004e2: btfss	 0x34            , 0	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004e7	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x34            , 0	  ; (OP_BCF, addrDest, bitDest)
i_0004e6: goto	 l_0004e9	 	  ; (OP_GOTO, isEnd)
l_0004e7: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x34            , 0	  ; (OP_BSF, addrDest, bitDest)
l_0004e9: btfss	 0x34            , 0	  ; (OP_BTFSS, addrO, bitO)
          goto	 l_0004ec	 	  ; (OP_GOTO, ifThen)
i_0004eb: goto	 l_0004ed	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0004ec: bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yalert:=$rung_top
l_0004ed: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x06            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x06            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_0004f4: goto	 l_0000dd	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_0004f5: goto	 l_0004f5	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 29
;|  0 | #TRISB                                            	|   1 byte  | 0x0086       |
;|  1 | $charToUart                                       	|   2 byte  | 0x0041       |
;|  2 | $fmtd_0_seq                                       	|   2 byte  | 0x003B       |
;|  3 | $fmtd_1_convertState                              	|   2 byte  | 0x0043       |
;|  4 | $scratch                                          	|   2 byte  | 0x003F       |
;|  5 | $seqScratch                                       	|   2 byte  | 0x003D       |
;|  7 | 150                                               	|   2 byte  | 0x0039       |
;| 14 | ADC0                                              	|   2 byte  | 0x0035       |
;| 17 | T0                                                	|   1 byte  | 0x0033       |
;| 22 | data                                              	|   2 byte  | 0x0037       |

;|Internal Relays: 9
;|  0 | $rung_top                                         	|   1 bit   | 0x0020       | 0     |
;|  1 | $once_0_TCY_T0                                    	|   1 bit   | 0x0020       | 1     |
;|  2 | Ready                                             	|   1 bit   | 0x0020       | 2     |
;|  3 | $scratch                                          	|   1 bit   | 0x0020       | 3     |
;|  4 | $once_1_FMTD_STR_                                 	|   1 bit   | 0x0020       | 4     |
;|  5 | $fmtd_3_doSend                                    	|   1 bit   | 0x0020       | 5     |
;|  6 | $fmtd_2_isLeadingZero                             	|   1 bit   | 0x0020       | 6     |
;|  7 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0020       | 7     |
;|  8 | $overflow                                         	|   1 bit   | 0x0034       | 0     |

