;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F876 is the LDmicro target processor.
	LIST    p=PIC16F876
#include P16F876.inc
	__CONFIG 0x3F72
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000138	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; TABLE char7seg[129]
l_000008: movlw	 0x00             	  ; (OP_MOVLW, ((addrOfTableRoutine + TABLE_CALC) >> 8) & 0xFF)
          addwf	 0x23            , 0	  ; (OP_ADDWF, Scratch1, DEST_W)
i_00000a: movwf	 0x0A            	  ; (OP_MOVWF, REG_PCLATH)
          movlw	 0x10             	  ; (OP_MOVLW, (addrOfTableRoutine + TABLE_CALC) & 0xFF)
          addwf	 0x22            , 0	  ; (OP_ADDWF, Scratch0, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
i_00000e: incf	 0x0A            , 1	  ; (OP_INCF, REG_PCLATH, DEST_F)
          movwf	 0x02            	  ; (OP_MOVWF, REG_PCL)
    ; DATA's size is 1
i_000010: retlw	 0x3F             	  ; (OP_RETLW, a->data[i])
i_000011: retlw	 0x06             	  ; (OP_RETLW, a->data[i])
i_000012: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_000013: retlw	 0x4F             	  ; (OP_RETLW, a->data[i])
i_000014: retlw	 0x66             	  ; (OP_RETLW, a->data[i])
i_000015: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000016: retlw	 0x7D             	  ; (OP_RETLW, a->data[i])
i_000017: retlw	 0x07             	  ; (OP_RETLW, a->data[i])
i_000018: retlw	 0x7F             	  ; (OP_RETLW, a->data[i])
i_000019: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_00001a: retlw	 0x77             	  ; (OP_RETLW, a->data[i])
i_00001b: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_00001c: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00001d: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_00001e: retlw	 0x79             	  ; (OP_RETLW, a->data[i])
i_00001f: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000020: retlw	 0xBF             	  ; (OP_RETLW, a->data[i])
i_000021: retlw	 0x86             	  ; (OP_RETLW, a->data[i])
i_000022: retlw	 0xDB             	  ; (OP_RETLW, a->data[i])
i_000023: retlw	 0xCF             	  ; (OP_RETLW, a->data[i])
i_000024: retlw	 0xE6             	  ; (OP_RETLW, a->data[i])
i_000025: retlw	 0xED             	  ; (OP_RETLW, a->data[i])
i_000026: retlw	 0xFD             	  ; (OP_RETLW, a->data[i])
i_000027: retlw	 0x87             	  ; (OP_RETLW, a->data[i])
i_000028: retlw	 0xFF             	  ; (OP_RETLW, a->data[i])
i_000029: retlw	 0xEF             	  ; (OP_RETLW, a->data[i])
i_00002a: retlw	 0xF7             	  ; (OP_RETLW, a->data[i])
i_00002b: retlw	 0xFC             	  ; (OP_RETLW, a->data[i])
i_00002c: retlw	 0xB9             	  ; (OP_RETLW, a->data[i])
i_00002d: retlw	 0xDE             	  ; (OP_RETLW, a->data[i])
i_00002e: retlw	 0xF9             	  ; (OP_RETLW, a->data[i])
i_00002f: retlw	 0xF1             	  ; (OP_RETLW, a->data[i])
i_000030: retlw	 0x00             	  ; (OP_RETLW, a->data[i])
i_000031: retlw	 0xB0             	  ; (OP_RETLW, a->data[i])
i_000032: retlw	 0x22             	  ; (OP_RETLW, a->data[i])
i_000033: retlw	 0x4E             	  ; (OP_RETLW, a->data[i])
i_000034: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000035: retlw	 0xD2             	  ; (OP_RETLW, a->data[i])
i_000036: retlw	 0xDA             	  ; (OP_RETLW, a->data[i])
i_000037: retlw	 0x20             	  ; (OP_RETLW, a->data[i])
i_000038: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_000039: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00003a: retlw	 0x72             	  ; (OP_RETLW, a->data[i])
i_00003b: retlw	 0x70             	  ; (OP_RETLW, a->data[i])
i_00003c: retlw	 0x0C             	  ; (OP_RETLW, a->data[i])
i_00003d: retlw	 0x40             	  ; (OP_RETLW, a->data[i])
i_00003e: retlw	 0x80             	  ; (OP_RETLW, a->data[i])
i_00003f: retlw	 0x52             	  ; (OP_RETLW, a->data[i])
i_000040: retlw	 0x3F             	  ; (OP_RETLW, a->data[i])
i_000041: retlw	 0x06             	  ; (OP_RETLW, a->data[i])
i_000042: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_000043: retlw	 0x4F             	  ; (OP_RETLW, a->data[i])
i_000044: retlw	 0x66             	  ; (OP_RETLW, a->data[i])
i_000045: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000046: retlw	 0x7D             	  ; (OP_RETLW, a->data[i])
i_000047: retlw	 0x07             	  ; (OP_RETLW, a->data[i])
i_000048: retlw	 0x7F             	  ; (OP_RETLW, a->data[i])
i_000049: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_00004a: retlw	 0x09             	  ; (OP_RETLW, a->data[i])
i_00004b: retlw	 0x0D             	  ; (OP_RETLW, a->data[i])
i_00004c: retlw	 0x61             	  ; (OP_RETLW, a->data[i])
i_00004d: retlw	 0x41             	  ; (OP_RETLW, a->data[i])
i_00004e: retlw	 0x43             	  ; (OP_RETLW, a->data[i])
i_00004f: retlw	 0xD3             	  ; (OP_RETLW, a->data[i])
i_000050: retlw	 0x9F             	  ; (OP_RETLW, a->data[i])
i_000051: retlw	 0x77             	  ; (OP_RETLW, a->data[i])
i_000052: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_000053: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_000054: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_000055: retlw	 0x79             	  ; (OP_RETLW, a->data[i])
i_000056: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000057: retlw	 0x3D             	  ; (OP_RETLW, a->data[i])
i_000058: retlw	 0x74             	  ; (OP_RETLW, a->data[i])
i_000059: retlw	 0x30             	  ; (OP_RETLW, a->data[i])
i_00005a: retlw	 0x1E             	  ; (OP_RETLW, a->data[i])
i_00005b: retlw	 0x75             	  ; (OP_RETLW, a->data[i])
i_00005c: retlw	 0x38             	  ; (OP_RETLW, a->data[i])
i_00005d: retlw	 0x55             	  ; (OP_RETLW, a->data[i])
i_00005e: retlw	 0x54             	  ; (OP_RETLW, a->data[i])
i_00005f: retlw	 0x5C             	  ; (OP_RETLW, a->data[i])
i_000060: retlw	 0x73             	  ; (OP_RETLW, a->data[i])
i_000061: retlw	 0x67             	  ; (OP_RETLW, a->data[i])
i_000062: retlw	 0x33             	  ; (OP_RETLW, a->data[i])
i_000063: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000064: retlw	 0x78             	  ; (OP_RETLW, a->data[i])
i_000065: retlw	 0x3E             	  ; (OP_RETLW, a->data[i])
i_000066: retlw	 0x1C             	  ; (OP_RETLW, a->data[i])
i_000067: retlw	 0x6A             	  ; (OP_RETLW, a->data[i])
i_000068: retlw	 0x76             	  ; (OP_RETLW, a->data[i])
i_000069: retlw	 0x6E             	  ; (OP_RETLW, a->data[i])
i_00006a: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_00006b: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00006c: retlw	 0x64             	  ; (OP_RETLW, a->data[i])
i_00006d: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00006e: retlw	 0x23             	  ; (OP_RETLW, a->data[i])
i_00006f: retlw	 0x08             	  ; (OP_RETLW, a->data[i])
i_000070: retlw	 0x20             	  ; (OP_RETLW, a->data[i])
i_000071: retlw	 0x5F             	  ; (OP_RETLW, a->data[i])
i_000072: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_000073: retlw	 0x58             	  ; (OP_RETLW, a->data[i])
i_000074: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_000075: retlw	 0x7B             	  ; (OP_RETLW, a->data[i])
i_000076: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000077: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_000078: retlw	 0x74             	  ; (OP_RETLW, a->data[i])
i_000079: retlw	 0x10             	  ; (OP_RETLW, a->data[i])
i_00007a: retlw	 0x0E             	  ; (OP_RETLW, a->data[i])
i_00007b: retlw	 0x75             	  ; (OP_RETLW, a->data[i])
i_00007c: retlw	 0x18             	  ; (OP_RETLW, a->data[i])
i_00007d: retlw	 0x55             	  ; (OP_RETLW, a->data[i])
i_00007e: retlw	 0x54             	  ; (OP_RETLW, a->data[i])
i_00007f: retlw	 0x5C             	  ; (OP_RETLW, a->data[i])
i_000080: retlw	 0x73             	  ; (OP_RETLW, a->data[i])
i_000081: retlw	 0x67             	  ; (OP_RETLW, a->data[i])
i_000082: retlw	 0x50             	  ; (OP_RETLW, a->data[i])
i_000083: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000084: retlw	 0x78             	  ; (OP_RETLW, a->data[i])
i_000085: retlw	 0x3E             	  ; (OP_RETLW, a->data[i])
i_000086: retlw	 0x1C             	  ; (OP_RETLW, a->data[i])
i_000087: retlw	 0x6A             	  ; (OP_RETLW, a->data[i])
i_000088: retlw	 0x76             	  ; (OP_RETLW, a->data[i])
i_000089: retlw	 0x6E             	  ; (OP_RETLW, a->data[i])
i_00008a: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_00008b: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00008c: retlw	 0x30             	  ; (OP_RETLW, a->data[i])
i_00008d: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00008e: retlw	 0x01             	  ; (OP_RETLW, a->data[i])
i_00008f: retlw	 0x00             	  ; (OP_RETLW, a->data[i])
i_000090: retlw	 0x63             	  ; (OP_RETLW, a->data[i])
    ; TABLE char7seg END
    ; MultiplyRoutine16x16=32 (2x2=4)
l_000091: clrf	 0x27            	  ; (OP_CLRF, result3)
          clrf	 0x26            	  ; (OP_CLRF, result2)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x10             	  ; (OP_MOVLW, 16)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_000098: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000a0	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x26            , 1	  ; (OP_ADDWF, result2, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x27            , 1	  ; (OP_INCF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
l_0000a0: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_000098	 	  ; (OP_GOTO, top)
i_0000a7: return	 	 	  ; (OP_RETURN)
    ; MultiplyRoutine24x16=40 (3x2=5)
          clrf	 0x28            	  ; (OP_CLRF, result4)
          clrf	 0x27            	  ; (OP_CLRF, result3)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x18             	  ; (OP_MOVLW, 24)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_0000b0: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000b8	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x23            , 0	  ; (OP_INCFSZ, multiplicand1, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, result4, DEST_F)
l_0000b8: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x28            , 1	  ; (OP_RRF, result4, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_0000b0	 	  ; (OP_GOTO, top)
i_0000c0: return	 	 	  ; (OP_RETURN)
    ; DivideRoutine16
l_0000c1: movf	 0x23            , 0 	  ; (OP_MOVF, dividend1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_0000cb	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_0000cb: btfss	 0x23            , 7	  ; (OP_BTFSS, dividend1, 7)
          goto	 l_0000d2	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_0000d2: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x11             	  ; (OP_MOVLW, 16 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_0000d7: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000f0	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_0000ee	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_0000ed: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000ee: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_0000ef: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000f0: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_0000f7: return	 	 	  ; (OP_RETURN, 0, 0)
    ; DivideRoutine24/16=24
          movf	 0x24            , 0 	  ; (OP_MOVF, dividend2, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
i_0000fb: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0000fc: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_000104	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_000104: btfss	 0x24            , 7	  ; (OP_BTFSS, dividend2, 7)
          goto	 l_00010e	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_00010e: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x19             	  ; (OP_MOVLW, 24 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_000113: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          rlf	 0x24            , 1	  ; (OP_RLF, dividend2, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_00012d	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_00012b	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_00012a: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012b: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_00012c: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012d: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_000137: return	 	 	  ; (OP_RETURN, 0, 0)
    ; Program Start
    ; Configure Timer1
l_000138: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0x6A             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x6A
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x18             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x18
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_000149: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_000149	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x87             	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x87
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xBF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xBF
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
    ; Clear Bit 7 - PORTs pull-ups are enabled by individual port latch values
          bcf	 0x01            , 7	  ; (OP_BCF, REG_OPTION, _RBPU)
    ; UART setup
          movlw	 0x20             	  ; (REG_SPBRG, divisor & 0xFF) ; 0x20
          movwf	 0x19            	  ; (REG_SPBRG, divisor & 0xFF) ; 0x99
          movlw	 0x20             	  ; (REG_TXSTA, 1 << TXEN) ; 0x20
          movwf	 0x18            	  ; (REG_TXSTA, 1 << TXEN) ; 0x98
          bcf	 0x03            , 5	  ;  BS(0x80,0x18) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x90             	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x90
          movwf	 0x18            	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x18
    ; Begin Of PLC Cycle
l_000166: btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_00016a: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_00016a	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; 
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000173	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x86) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISB:=0x0(0)
    ; CopyLitToReg
          clrf	 0x06            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISB(0x86):=0(0x0)
l_000173: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_UART_RECV_AVAIL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00017b	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
l_00017b: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_RECV
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_000197	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_000197	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL char:=0x0(0)
    ; CopyLitToReg
          clrf	 0x33            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x33):=0(0x0)
          clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x33):=0(0x0)
    ; INT_UART_RECV1
          btfss	 0x0C            , 5	  ; (OP_BTFSS, REG_PIR1, 5)
          goto	 l_000197	 	  ; (OP_GOTO, done)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movwf	 0x33            	  ; (OP_MOVWF, addr1)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, REG_RCSTA, 1)
          goto	 l_000193	 	  ; (OP_GOTO, yesError)
          btfsc	 0x18            , 2	  ; (OP_BTFSC, REG_RCSTA, 2)
          goto	 l_000193	 	  ; (OP_GOTO, yesError)
i_000192: goto	 l_000197	 	  ; (OP_GOTO, done)
l_000193: movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          bcf	 0x18            , 4	  ; (OP_BCF, REG_RCSTA, 4)
          bsf	 0x18            , 4	  ; (OP_BSF, REG_RCSTA, 4)
    ; INT_IF_BIT_SET $parThis_0
l_000197: btfss	 0x20            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_00019a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
l_00019a: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_SEND
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_0001a6	 	  ; (OP_GOTO, condFalse)
l_0001a0: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0001a0	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x33) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x33            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_UART_SEND_BUSY
    ; CopyNotBit
l_0001a6: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_0001b2	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_0001b2: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_PIECEWISE_LINEAR
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0006ed	 	  ; (OP_GOTO, condFalse)
    ; PWL 15
    ; INT_CLEAR_BIT $scratch
          bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 103
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x67             	  ; (OP_MOVLW, lNow, 0, comment) ; 103
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 103
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 103
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0001d3	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0001d3	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0001d3: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001d8	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0001d7: goto	 l_0001da	 	  ; (OP_GOTO, isEnd)
l_0001d8: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0001da: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0001dd	 	  ; (OP_GOTO, ifThen)
i_0001dc: goto	 l_0001de	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0001dd: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0001de: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000210	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 101; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x65             	  ; (OP_MOVLW, lNow, 0, comment) ; 101
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 101
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 101
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_000200: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000201: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 14; ''; ''
    ; CopyLitToReg
          movlw	 0x0E             	  ; (OP_MOVLW, lNow, 0, comment) ; 14
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 14
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 14
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 14
    ; INT_CLEAR_BIT $scratch
l_000210: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 102
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x66             	  ; (OP_MOVLW, lNow, 0, comment) ; 102
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 102
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 102
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_000222: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000223: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00022c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00022c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00022c: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000231	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000230: goto	 l_000233	 	  ; (OP_GOTO, isEnd)
l_000231: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000233: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000236	 	  ; (OP_GOTO, ifThen)
i_000235: goto	 l_000237	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000236: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000237: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000269	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 100; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; 100
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 100
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 100
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_000259: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00025a: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 13; ''; ''
    ; CopyLitToReg
          movlw	 0x0D             	  ; (OP_MOVLW, lNow, 0, comment) ; 13
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 13
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 13
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 13
    ; INT_CLEAR_BIT $scratch
l_000269: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 101
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x65             	  ; (OP_MOVLW, lNow, 0, comment) ; 101
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 101
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 101
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_00027b: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00027c: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000285	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000285	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000285: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00028a	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000289: goto	 l_00028c	 	  ; (OP_GOTO, isEnd)
l_00028a: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_00028c: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00028f	 	  ; (OP_GOTO, ifThen)
i_00028e: goto	 l_000290	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_00028f: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000290: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0002c2	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 99; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; 99
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 99
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 99
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_0002b2: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002b3: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 12; ''; ''
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 12
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 12
    ; INT_CLEAR_BIT $scratch
l_0002c2: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 100
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; 100
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 100
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 100
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0002d4: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002d5: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002de	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002de	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002de: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002e3	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0002e2: goto	 l_0002e5	 	  ; (OP_GOTO, isEnd)
l_0002e3: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0002e5: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002e8	 	  ; (OP_GOTO, ifThen)
i_0002e7: goto	 l_0002e9	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0002e8: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0002e9: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00031b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 98; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x62             	  ; (OP_MOVLW, lNow, 0, comment) ; 98
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 98
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 98
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_00030b: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00030c: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 11; ''; ''
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 11
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 11
    ; INT_CLEAR_BIT $scratch
l_00031b: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 99
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x63             	  ; (OP_MOVLW, lNow, 0, comment) ; 99
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 99
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 99
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_00032d: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00032e: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000337	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000337	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000337: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00033c	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_00033b: goto	 l_00033e	 	  ; (OP_GOTO, isEnd)
l_00033c: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_00033e: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000341	 	  ; (OP_GOTO, ifThen)
i_000340: goto	 l_000342	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000341: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000342: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000374	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 97; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x61             	  ; (OP_MOVLW, lNow, 0, comment) ; 97
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 97
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 97
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_000364: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000365: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 10; ''; ''
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; 10
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 10
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 10
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 10
    ; INT_CLEAR_BIT $scratch
l_000374: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 98
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x62             	  ; (OP_MOVLW, lNow, 0, comment) ; 98
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 98
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 98
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_000386: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000387: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000390	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000390	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000390: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000395	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000394: goto	 l_000397	 	  ; (OP_GOTO, isEnd)
l_000395: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000397: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00039a	 	  ; (OP_GOTO, ifThen)
i_000399: goto	 l_00039b	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_00039a: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_00039b: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0003cd	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 57; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x39             	  ; (OP_MOVLW, lNow, 0, comment) ; 57
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 57
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 57
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 40
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x28             	  ; (OP_MOVLW, lNow, 0, comment) ; 40
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 40
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 40
i_0003bd: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003be: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 9; ''; ''
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 9
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 9
    ; INT_CLEAR_BIT $scratch
l_0003cd: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 58
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x3A             	  ; (OP_MOVLW, lNow, 0, comment) ; 58
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 58
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 58
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0003df: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003e0: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0003e9	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0003e9	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0003e9: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0003ee	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0003ed: goto	 l_0003f0	 	  ; (OP_GOTO, isEnd)
l_0003ee: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0003f0: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0003f3	 	  ; (OP_GOTO, ifThen)
i_0003f2: goto	 l_0003f4	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0003f3: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0003f4: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000426	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 56; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x38             	  ; (OP_MOVLW, lNow, 0, comment) ; 56
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 56
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 56
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_000416: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000417: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 8; ''; ''
    ; CopyLitToReg
          movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; 8
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 8
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 8
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 8
    ; INT_CLEAR_BIT $scratch
l_000426: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 57
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x39             	  ; (OP_MOVLW, lNow, 0, comment) ; 57
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 57
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 57
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_000438: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000439: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000442	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000442	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000442: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000447	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000446: goto	 l_000449	 	  ; (OP_GOTO, isEnd)
l_000447: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000449: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00044c	 	  ; (OP_GOTO, ifThen)
i_00044b: goto	 l_00044d	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_00044c: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_00044d: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00047f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 55; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x37             	  ; (OP_MOVLW, lNow, 0, comment) ; 55
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 55
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 55
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_00046f: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000470: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 7; ''; ''
    ; CopyLitToReg
          movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; 7
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 7
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 7
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 7
    ; INT_CLEAR_BIT $scratch
l_00047f: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 56
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x38             	  ; (OP_MOVLW, lNow, 0, comment) ; 56
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 56
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 56
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_000491: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000492: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00049b	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00049b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00049b: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004a0	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_00049f: goto	 l_0004a2	 	  ; (OP_GOTO, isEnd)
l_0004a0: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0004a2: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0004a5	 	  ; (OP_GOTO, ifThen)
i_0004a4: goto	 l_0004a6	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0004a5: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0004a6: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0004d8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 54; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x36             	  ; (OP_MOVLW, lNow, 0, comment) ; 54
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 54
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 54
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_0004c8: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0004c9: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 6; ''; ''
    ; CopyLitToReg
          movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; 6
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 6
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 6
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 6
    ; INT_CLEAR_BIT $scratch
l_0004d8: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 55
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x37             	  ; (OP_MOVLW, lNow, 0, comment) ; 55
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 55
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 55
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0004ea: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0004eb: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004f4	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004f4	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0004f4: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004f9	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0004f8: goto	 l_0004fb	 	  ; (OP_GOTO, isEnd)
l_0004f9: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0004fb: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0004fe	 	  ; (OP_GOTO, ifThen)
i_0004fd: goto	 l_0004ff	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0004fe: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0004ff: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000531	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 53; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x35             	  ; (OP_MOVLW, lNow, 0, comment) ; 53
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 53
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 53
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_000521: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000522: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 5; ''; ''
    ; CopyLitToReg
          movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; 5
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 5
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 5
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 5
    ; INT_CLEAR_BIT $scratch
l_000531: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 54
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x36             	  ; (OP_MOVLW, lNow, 0, comment) ; 54
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 54
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 54
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_000543: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000544: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00054d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00054d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00054d: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000552	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000551: goto	 l_000554	 	  ; (OP_GOTO, isEnd)
l_000552: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000554: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000557	 	  ; (OP_GOTO, ifThen)
i_000556: goto	 l_000558	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000557: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000558: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00058a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 52; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x34             	  ; (OP_MOVLW, lNow, 0, comment) ; 52
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 52
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 52
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_00057a: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00057b: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 4; ''; ''
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 4
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 4
    ; INT_CLEAR_BIT $scratch
l_00058a: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 53
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x35             	  ; (OP_MOVLW, lNow, 0, comment) ; 53
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 53
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 53
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_00059c: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00059d: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0005a6	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0005a6	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0005a6: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0005ab	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0005aa: goto	 l_0005ad	 	  ; (OP_GOTO, isEnd)
l_0005ab: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0005ad: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0005b0	 	  ; (OP_GOTO, ifThen)
i_0005af: goto	 l_0005b1	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0005b0: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0005b1: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0005e3	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 51; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x33             	  ; (OP_MOVLW, lNow, 0, comment) ; 51
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 51
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 51
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_0005d3: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0005d4: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 3; ''; ''
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 3
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 3
    ; INT_CLEAR_BIT $scratch
l_0005e3: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 52
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x34             	  ; (OP_MOVLW, lNow, 0, comment) ; 52
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 52
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 52
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0005f5: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0005f6: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0005ff	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0005ff	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0005ff: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000604	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000603: goto	 l_000606	 	  ; (OP_GOTO, isEnd)
l_000604: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000606: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000609	 	  ; (OP_GOTO, ifThen)
i_000608: goto	 l_00060a	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000609: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_00060a: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00063c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 50; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x32             	  ; (OP_MOVLW, lNow, 0, comment) ; 50
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 50
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 50
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_00062c: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00062d: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 2; ''; ''
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 2
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 2
    ; INT_CLEAR_BIT $scratch
l_00063c: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 51
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x33             	  ; (OP_MOVLW, lNow, 0, comment) ; 51
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 51
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 51
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_00064e: bcf	 0x0A            , 3	  ;  PS(0x18,0x06) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00064f: bcf	 0x0A            , 4	  ;  PS(0x18,0x06) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000658	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000658	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000658: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00065d	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_00065c: goto	 l_00065f	 	  ; (OP_GOTO, isEnd)
l_00065d: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_00065f: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000662	 	  ; (OP_GOTO, ifThen)
i_000661: goto	 l_000663	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000662: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000663: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000695	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 49; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x31             	  ; (OP_MOVLW, lNow, 0, comment) ; 49
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 49
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 49
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_000685: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000686: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 1; ''; ''
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 1
    ; INT_CLEAR_BIT $scratch
l_000695: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES char 50
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x32             	  ; (OP_MOVLW, lNow, 0, comment) ; 50
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 50
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 50
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0006a7: bcf	 0x0A            , 3	  ;  PS(0x18,0x06) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0006a8: bcf	 0x0A            , 4	  ;  PS(0x18,0x06) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0006b1	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0006b1	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0006b1: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0006b6	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0006b5: goto	 l_0006b8	 	  ; (OP_GOTO, isEnd)
l_0006b6: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0006b8: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0006bb	 	  ; (OP_GOTO, ifThen)
i_0006ba: goto	 l_0006bc	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0006bb: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0006bc: btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0006ed	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT ssd := char - 48; ''; ''
    ; CopyRegToReg
          movf	 0x33            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; 48
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 48
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 48
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x35            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x36            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_MULTIPLY ssd := ssd * 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x22            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x23            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_DIVIDE ssd := ssd / 1
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
i_0006de: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0006df: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x22            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x35            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
          movf	 0x23            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x36            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; ssd
    ; INT_SET_VARIABLE_ADD ssd := ssd + 0; ''; ''
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; add
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x35            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x36            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
l_0006ed: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_0006ee: bcf	 0x0A            , 3	  ;  PS(0x18,0x07) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0006ef: bcf	 0x0A            , 4	  ;  PS(0x18,0x07) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000757	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3B):=176(0xB0)
          movwf	 0x3B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3B):=176(0xB0)
          clrf	 0x3C            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3B):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x35            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3B            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000701	 	  ; (OP_GOTO, ifEnd)
          movf	 0x36            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000701	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL ssd:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; ssd(0x35):=128(0x80)
          movwf	 0x35            	  ; (OP_MOVWF, addr + i, 0, comment) ; ssd(0x35):=128(0x80)
          clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; ssd(0x35):=128(0x80)
i_000700: goto	 l_00074e	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES ssd 0
    ; CopyRegToReg
l_000701: movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x26            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000719	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000719	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000719: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00071e	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_00071d: goto	 l_000720	 	  ; (OP_GOTO, isEnd)
l_00071e: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000720: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000723	 	  ; (OP_GOTO, ifThen)
i_000722: goto	 l_000727	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL ssd:=0x20(32)
    ; CopyLitToReg
l_000723: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; ssd(0x35):=32(0x20)
          movwf	 0x35            	  ; (OP_MOVWF, addr + i, 0, comment) ; ssd(0x35):=32(0x20)
          clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; ssd(0x35):=32(0x20)
i_000726: goto	 l_00074e	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES ssd 129
    ; CopyRegToReg
l_000727: movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x20            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x26            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x22            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x27            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x21            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000740	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x21            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000740	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x20            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000740: btfss	 0x20            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000745	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000744: goto	 l_000747	 	  ; (OP_GOTO, isEnd)
l_000745: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000747: btfsc	 0x20            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00074a	 	  ; (OP_GOTO, ifThen)
i_000749: goto	 l_00074b	 	  ; (OP_GOTO, ifEnd)
l_00074a: goto	 l_00074e	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL ssd:=0x20(32)
    ; CopyLitToReg
l_00074b: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; ssd(0x35):=32(0x20)
          movwf	 0x35            	  ; (OP_MOVWF, addr + i, 0, comment) ; ssd(0x35):=32(0x20)
          clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; ssd(0x35):=32(0x20)
    ; Scratch0:1 := Index 'ssd'
    ; CopyRegToReg
l_00074e: movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; ssd
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x3B            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x3C            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_000757: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000758: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_000759: goto	 l_000166	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_00075a: goto	 l_00075a	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 19
;|  0 | #PORTB                                            	|   1 byte  | 0x0006       |
;|  1 | #TRISB                                            	|   1 byte  | 0x0086       |
;|  2 | char                                              	|   2 byte  | 0x0033       |
;|  3 | char7seg                                          	| 129 byte  | 0x0008       |
;| 10 | 1                                                 	|   2 byte  | 0x0037       |
;| 12 | $scratch                                          	|   2 byte  | 0x003B       |
;| 14 | 40                                                	|   2 byte  | 0x0039       |
;| 18 | ssd                                               	|   2 byte  | 0x0035       |

;|Internal Relays: 6
;|  0 | $rung_top                                         	|   1 bit   | 0x0020       | 0     |
;|  1 | $parOut_0                                         	|   1 bit   | 0x0020       | 1     |
;|  2 | $parThis_0                                        	|   1 bit   | 0x0020       | 2     |
;|  3 | $scratch                                          	|   1 bit   | 0x0020       | 3     |
;|  4 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0020       | 4     |
;|  5 | $overflow                                         	|   1 bit   | 0x0020       | 5     |

