;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F876 is the LDmicro target processor.
	LIST    p=PIC16F876
#include P16F876.inc
	__CONFIG 0x3F72
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000091	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; TABLE char7seg[129]
l_000008: movlw	 0x00             	  ; (OP_MOVLW, ((addrOfTableRoutine + TABLE_CALC) >> 8) & 0xFF)
          addwf	 0x24            , 0	  ; (OP_ADDWF, Scratch1, DEST_W)
i_00000a: movwf	 0x0A            	  ; (OP_MOVWF, REG_PCLATH)
          movlw	 0x10             	  ; (OP_MOVLW, (addrOfTableRoutine + TABLE_CALC) & 0xFF)
          addwf	 0x23            , 0	  ; (OP_ADDWF, Scratch0, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
i_00000e: incf	 0x0A            , 1	  ; (OP_INCF, REG_PCLATH, DEST_F)
          movwf	 0x02            	  ; (OP_MOVWF, REG_PCL)
    ; DATA's size is 1
i_000010: retlw	 0x3F             	  ; (OP_RETLW, a->data[i])
i_000011: retlw	 0x06             	  ; (OP_RETLW, a->data[i])
i_000012: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_000013: retlw	 0x4F             	  ; (OP_RETLW, a->data[i])
i_000014: retlw	 0x66             	  ; (OP_RETLW, a->data[i])
i_000015: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000016: retlw	 0x7D             	  ; (OP_RETLW, a->data[i])
i_000017: retlw	 0x07             	  ; (OP_RETLW, a->data[i])
i_000018: retlw	 0x7F             	  ; (OP_RETLW, a->data[i])
i_000019: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_00001a: retlw	 0x77             	  ; (OP_RETLW, a->data[i])
i_00001b: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_00001c: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00001d: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_00001e: retlw	 0x79             	  ; (OP_RETLW, a->data[i])
i_00001f: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000020: retlw	 0xBF             	  ; (OP_RETLW, a->data[i])
i_000021: retlw	 0x86             	  ; (OP_RETLW, a->data[i])
i_000022: retlw	 0xDB             	  ; (OP_RETLW, a->data[i])
i_000023: retlw	 0xCF             	  ; (OP_RETLW, a->data[i])
i_000024: retlw	 0xE6             	  ; (OP_RETLW, a->data[i])
i_000025: retlw	 0xED             	  ; (OP_RETLW, a->data[i])
i_000026: retlw	 0xFD             	  ; (OP_RETLW, a->data[i])
i_000027: retlw	 0x87             	  ; (OP_RETLW, a->data[i])
i_000028: retlw	 0xFF             	  ; (OP_RETLW, a->data[i])
i_000029: retlw	 0xEF             	  ; (OP_RETLW, a->data[i])
i_00002a: retlw	 0xF7             	  ; (OP_RETLW, a->data[i])
i_00002b: retlw	 0xFC             	  ; (OP_RETLW, a->data[i])
i_00002c: retlw	 0xB9             	  ; (OP_RETLW, a->data[i])
i_00002d: retlw	 0xDE             	  ; (OP_RETLW, a->data[i])
i_00002e: retlw	 0xF9             	  ; (OP_RETLW, a->data[i])
i_00002f: retlw	 0xF1             	  ; (OP_RETLW, a->data[i])
i_000030: retlw	 0x00             	  ; (OP_RETLW, a->data[i])
i_000031: retlw	 0xB0             	  ; (OP_RETLW, a->data[i])
i_000032: retlw	 0x22             	  ; (OP_RETLW, a->data[i])
i_000033: retlw	 0x4E             	  ; (OP_RETLW, a->data[i])
i_000034: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000035: retlw	 0xD2             	  ; (OP_RETLW, a->data[i])
i_000036: retlw	 0xDA             	  ; (OP_RETLW, a->data[i])
i_000037: retlw	 0x20             	  ; (OP_RETLW, a->data[i])
i_000038: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_000039: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00003a: retlw	 0x72             	  ; (OP_RETLW, a->data[i])
i_00003b: retlw	 0x70             	  ; (OP_RETLW, a->data[i])
i_00003c: retlw	 0x0C             	  ; (OP_RETLW, a->data[i])
i_00003d: retlw	 0x40             	  ; (OP_RETLW, a->data[i])
i_00003e: retlw	 0x80             	  ; (OP_RETLW, a->data[i])
i_00003f: retlw	 0x52             	  ; (OP_RETLW, a->data[i])
i_000040: retlw	 0x3F             	  ; (OP_RETLW, a->data[i])
i_000041: retlw	 0x06             	  ; (OP_RETLW, a->data[i])
i_000042: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_000043: retlw	 0x4F             	  ; (OP_RETLW, a->data[i])
i_000044: retlw	 0x66             	  ; (OP_RETLW, a->data[i])
i_000045: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000046: retlw	 0x7D             	  ; (OP_RETLW, a->data[i])
i_000047: retlw	 0x07             	  ; (OP_RETLW, a->data[i])
i_000048: retlw	 0x7F             	  ; (OP_RETLW, a->data[i])
i_000049: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_00004a: retlw	 0x09             	  ; (OP_RETLW, a->data[i])
i_00004b: retlw	 0x0D             	  ; (OP_RETLW, a->data[i])
i_00004c: retlw	 0x61             	  ; (OP_RETLW, a->data[i])
i_00004d: retlw	 0x41             	  ; (OP_RETLW, a->data[i])
i_00004e: retlw	 0x43             	  ; (OP_RETLW, a->data[i])
i_00004f: retlw	 0xD3             	  ; (OP_RETLW, a->data[i])
i_000050: retlw	 0x9F             	  ; (OP_RETLW, a->data[i])
i_000051: retlw	 0x77             	  ; (OP_RETLW, a->data[i])
i_000052: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_000053: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_000054: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_000055: retlw	 0x79             	  ; (OP_RETLW, a->data[i])
i_000056: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000057: retlw	 0x3D             	  ; (OP_RETLW, a->data[i])
i_000058: retlw	 0x74             	  ; (OP_RETLW, a->data[i])
i_000059: retlw	 0x30             	  ; (OP_RETLW, a->data[i])
i_00005a: retlw	 0x1E             	  ; (OP_RETLW, a->data[i])
i_00005b: retlw	 0x75             	  ; (OP_RETLW, a->data[i])
i_00005c: retlw	 0x38             	  ; (OP_RETLW, a->data[i])
i_00005d: retlw	 0x55             	  ; (OP_RETLW, a->data[i])
i_00005e: retlw	 0x54             	  ; (OP_RETLW, a->data[i])
i_00005f: retlw	 0x5C             	  ; (OP_RETLW, a->data[i])
i_000060: retlw	 0x73             	  ; (OP_RETLW, a->data[i])
i_000061: retlw	 0x67             	  ; (OP_RETLW, a->data[i])
i_000062: retlw	 0x33             	  ; (OP_RETLW, a->data[i])
i_000063: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000064: retlw	 0x78             	  ; (OP_RETLW, a->data[i])
i_000065: retlw	 0x3E             	  ; (OP_RETLW, a->data[i])
i_000066: retlw	 0x1C             	  ; (OP_RETLW, a->data[i])
i_000067: retlw	 0x6A             	  ; (OP_RETLW, a->data[i])
i_000068: retlw	 0x76             	  ; (OP_RETLW, a->data[i])
i_000069: retlw	 0x6E             	  ; (OP_RETLW, a->data[i])
i_00006a: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_00006b: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00006c: retlw	 0x64             	  ; (OP_RETLW, a->data[i])
i_00006d: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00006e: retlw	 0x23             	  ; (OP_RETLW, a->data[i])
i_00006f: retlw	 0x08             	  ; (OP_RETLW, a->data[i])
i_000070: retlw	 0x20             	  ; (OP_RETLW, a->data[i])
i_000071: retlw	 0x5F             	  ; (OP_RETLW, a->data[i])
i_000072: retlw	 0x7C             	  ; (OP_RETLW, a->data[i])
i_000073: retlw	 0x58             	  ; (OP_RETLW, a->data[i])
i_000074: retlw	 0x5E             	  ; (OP_RETLW, a->data[i])
i_000075: retlw	 0x7B             	  ; (OP_RETLW, a->data[i])
i_000076: retlw	 0x71             	  ; (OP_RETLW, a->data[i])
i_000077: retlw	 0x6F             	  ; (OP_RETLW, a->data[i])
i_000078: retlw	 0x74             	  ; (OP_RETLW, a->data[i])
i_000079: retlw	 0x10             	  ; (OP_RETLW, a->data[i])
i_00007a: retlw	 0x0E             	  ; (OP_RETLW, a->data[i])
i_00007b: retlw	 0x75             	  ; (OP_RETLW, a->data[i])
i_00007c: retlw	 0x18             	  ; (OP_RETLW, a->data[i])
i_00007d: retlw	 0x55             	  ; (OP_RETLW, a->data[i])
i_00007e: retlw	 0x54             	  ; (OP_RETLW, a->data[i])
i_00007f: retlw	 0x5C             	  ; (OP_RETLW, a->data[i])
i_000080: retlw	 0x73             	  ; (OP_RETLW, a->data[i])
i_000081: retlw	 0x67             	  ; (OP_RETLW, a->data[i])
i_000082: retlw	 0x50             	  ; (OP_RETLW, a->data[i])
i_000083: retlw	 0x6D             	  ; (OP_RETLW, a->data[i])
i_000084: retlw	 0x78             	  ; (OP_RETLW, a->data[i])
i_000085: retlw	 0x3E             	  ; (OP_RETLW, a->data[i])
i_000086: retlw	 0x1C             	  ; (OP_RETLW, a->data[i])
i_000087: retlw	 0x6A             	  ; (OP_RETLW, a->data[i])
i_000088: retlw	 0x76             	  ; (OP_RETLW, a->data[i])
i_000089: retlw	 0x6E             	  ; (OP_RETLW, a->data[i])
i_00008a: retlw	 0x5B             	  ; (OP_RETLW, a->data[i])
i_00008b: retlw	 0x39             	  ; (OP_RETLW, a->data[i])
i_00008c: retlw	 0x30             	  ; (OP_RETLW, a->data[i])
i_00008d: retlw	 0x0F             	  ; (OP_RETLW, a->data[i])
i_00008e: retlw	 0x01             	  ; (OP_RETLW, a->data[i])
i_00008f: retlw	 0x00             	  ; (OP_RETLW, a->data[i])
i_000090: retlw	 0x63             	  ; (OP_RETLW, a->data[i])
    ; TABLE char7seg END
    ; Program Start
    ; Configure Timer1
l_000091: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0x71             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x71
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x02             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x2
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_0000a2: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_0000a2	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x87             	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x87
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (7 << 0)) ; 0x9F
          bcf	 0x03            , 5	  ;  BS(0x80,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xBF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xBF
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
    ; Clear Bit 7 - PORTs pull-ups are enabled by individual port latch values
          bcf	 0x01            , 7	  ; (OP_BCF, REG_OPTION, _RBPU)
    ; UART setup
          movlw	 0x0F             	  ; (REG_SPBRG, divisor & 0xFF) ; 0xF
          movwf	 0x19            	  ; (REG_SPBRG, divisor & 0xFF) ; 0x99
          movlw	 0x20             	  ; (REG_TXSTA, 1 << TXEN) ; 0x20
          movwf	 0x18            	  ; (REG_TXSTA, 1 << TXEN) ; 0x98
          bcf	 0x03            , 5	  ;  BS(0x80,0x18) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x90             	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x90
          movwf	 0x18            	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x18
    ; Begin Of PLC Cycle
l_0000bf: btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_0000c3: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_0000c3	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; INIT VARS
    ; INT_IF_BIT_CLEAR $once_0_INIT_VARS
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_INIT_VARS
          goto	 l_0000cb	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_0_INIT_VARS
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_INIT_VARS
    ; INT_SET_VARIABLE_TO_LITERAL C0:=0x0(0)
    ; CopyLitToReg
          clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; C0(0x34):=0(0x0)
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
l_0000cb: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T0 2000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000f6	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T0 2
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T0
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0000e0	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0000e0	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0000e0: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0000e5	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_0000e4: goto	 l_0000e7	 	  ; (OP_GOTO, isEnd)
l_0000e5: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_0000e7: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0000ea	 	  ; (OP_GOTO, ifThen)
i_0000e9: goto	 l_0000ec	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T0 overlap to  overflow to 
l_0000ea: incf	 0x35            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T0
i_0000eb: goto	 l_0000f2	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_0000ec: clrf	 0x35            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x35):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_1_TCY_T0
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T0
          goto	 l_0000f1	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_1_TCY_T0
          bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_TCY_T0
i_0000f0: goto	 l_0000f2	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_TCY_T0
l_0000f1: bcf	 0x20            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_TCY_T0
    ; INT_IF_BIT_CLEAR $once_1_TCY_T0
l_0000f2: btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T0
          goto	 l_0000f5	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_0000f5: goto	 l_0000f7	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T0:=0x0(0)
    ; CopyLitToReg
l_0000f6: clrf	 0x35            	  ; (OP_CLRF, addr + i, 0, comment) ; T0(0x35):=0(0x0)
    ; ELEM_ONE_SHOT_RISING
    ; INT_IF_BIT_SET $rung_top
l_0000f7: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0000ff	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_SET $once_2_ONE_SHOT_RISING_
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
          goto	 l_0000fd	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_0000fc: goto	 l_0000fe	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $once_2_ONE_SHOT_RISING_
l_0000fd: bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
l_0000fe: goto	 l_000100	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_2_ONE_SHOT_RISING_
l_0000ff: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_2_ONE_SHOT_RISING_
    ; ELEM_CTC
    ; INT_IF_BIT_SET $rung_top
l_000100: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000124	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; INT_IF_BIT_CLEAR $once_3_CTC_C0
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_3_CTC_C0
          goto	 l_000123	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_3_CTC_C0
          bsf	 0x20            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_3_CTC_C0
    ; INT_INCREMENT_VARIABLE C0 overlap to  overflow to 
          incf	 0x34            , 1	  ; (OP_INCF, addr, DEST_F, name) ; C0
    ; INT_IF_GRT C0 4
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x23            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x34            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x34            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000117	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x34            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000117	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000117: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00011c	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_00011b: goto	 l_00011e	 	  ; (OP_GOTO, isEnd)
l_00011c: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_00011e: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000121	 	  ; (OP_GOTO, ifThen)
i_000120: goto	 l_000123	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL C0:=0x0(0)
    ; CopyLitToReg
l_000121: clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; C0(0x34):=0(0x0)
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
l_000123: goto	 l_000125	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_3_CTC_C0
l_000124: bcf	 0x20            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_3_CTC_C0
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
l_000125: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00012a	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x86) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISB:=0x0(0)
    ; CopyLitToReg
          clrf	 0x06            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISB(0x86):=0(0x0)
l_00012a: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000130	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x87) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISC:=0xF0(240)
    ; CopyLitToReg
          movlw	 0xF0             	  ; (OP_MOVLW, lNow, 0, comment) ; #TRISC(0x87):=240(0xF0)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #TRISC(0x87):=240(0xF0)
l_000130: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_UART_RECV_AVAIL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000138	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ready:=$rung_top
l_000138: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Ready
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Ready
          goto	 l_000140	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
l_000140: bcf	 0x20            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_RECV
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_00015c	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_00015c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL char:=0x0(0)
    ; CopyLitToReg
          clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x36):=0(0x0)
          clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x36):=0(0x0)
    ; INT_UART_RECV1
          btfss	 0x0C            , 5	  ; (OP_BTFSS, REG_PIR1, 5)
          goto	 l_00015c	 	  ; (OP_GOTO, done)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movwf	 0x36            	  ; (OP_MOVWF, addr1)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, REG_RCSTA, 1)
          goto	 l_000158	 	  ; (OP_GOTO, yesError)
          btfsc	 0x18            , 2	  ; (OP_BTFSC, REG_RCSTA, 2)
          goto	 l_000158	 	  ; (OP_GOTO, yesError)
i_000157: goto	 l_00015c	 	  ; (OP_GOTO, done)
l_000158: movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          bcf	 0x18            , 4	  ; (OP_BCF, REG_RCSTA, 4)
          bsf	 0x18            , 4	  ; (OP_BSF, REG_RCSTA, 4)
    ; INT_IF_BIT_SET $parThis_0
l_00015c: btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_00015f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
l_00015f: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_SEND
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_00016b	 	  ; (OP_GOTO, condFalse)
l_000165: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_000165	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x36) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x36            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_UART_SEND_BUSY
    ; CopyNotBit
l_00016b: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_0
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_0
          goto	 l_000177	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x20            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_000177: btfsc	 0x20            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 6	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Ready
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Ready
          goto	 l_00017f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_00017f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000185	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE buf0 := char
    ; CopyRegToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf0
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; char
          movwf	 0x39            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf0
    ; ELEM_SHIFT_REGISTER
    ; INT_IF_BIT_SET $rung_top
l_000185: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000199	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_4_SHIFT_REGISTER_buf
          btfsc	 0x21            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_4_SHIFT_REGISTER_buf
          goto	 l_000199	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE buf4 := buf3
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf4
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x3B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf4
    ; INT_SET_VARIABLE_TO_VARIABLE buf3 := buf2
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf3
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf3
    ; INT_SET_VARIABLE_TO_VARIABLE buf2 := buf1
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf2
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x3F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf2
    ; INT_SET_VARIABLE_TO_VARIABLE buf1 := buf0
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf0
          movwf	 0x40            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf1
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf0
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; buf1
    ; INT_COPY_BIT_TO_BIT $once_4_SHIFT_REGISTER_buf:=$rung_top
l_000199: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 6 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001a8	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          movf	 0x34            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x27            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0001a7	 	  ; (OP_GOTO, ifThen)
i_0001a6: goto	 l_0001a8	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0001a7: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_0001a8: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00020f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x42):=176(0xB0)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x3A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x42            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0001b9	 	  ; (OP_GOTO, ifEnd)
          movf	 0x3B            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x43            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0001b9	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf4:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; buf4(0x3A):=128(0x80)
          movwf	 0x3A            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf4(0x3A):=128(0x80)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; buf4(0x3A):=128(0x80)
i_0001b8: goto	 l_000206	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf4 0
    ; CopyRegToReg
l_0001b9: movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0001d1	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0001d1	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0001d1: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001d6	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_0001d5: goto	 l_0001d8	 	  ; (OP_GOTO, isEnd)
l_0001d6: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_0001d8: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0001db	 	  ; (OP_GOTO, ifThen)
i_0001da: goto	 l_0001df	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf4:=0x20(32)
    ; CopyLitToReg
l_0001db: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf4(0x3A):=32(0x20)
          movwf	 0x3A            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf4(0x3A):=32(0x20)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; buf4(0x3A):=32(0x20)
i_0001de: goto	 l_000206	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf4 129
    ; CopyRegToReg
l_0001df: movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0001f8	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0001f8	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0001f8: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001fd	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_0001fc: goto	 l_0001ff	 	  ; (OP_GOTO, isEnd)
l_0001fd: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_0001ff: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000202	 	  ; (OP_GOTO, ifThen)
i_000201: goto	 l_000203	 	  ; (OP_GOTO, ifEnd)
l_000202: goto	 l_000206	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL buf4:=0x20(32)
    ; CopyLitToReg
l_000203: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf4(0x3A):=32(0x20)
          movwf	 0x3A            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf4(0x3A):=32(0x20)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; buf4(0x3A):=32(0x20)
    ; Scratch0:1 := Index 'buf4'
    ; CopyRegToReg
l_000206: movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf4
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x42            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x43            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_00020f: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000210: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000214	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000214: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000218	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=1(0x1)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=1(0x1)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 7 =======
    ; INT_SET_BIT $rung_top
l_000218: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000223	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 2
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 2
          movf	 0x34            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x27            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000222	 	  ; (OP_GOTO, ifThen)
i_000221: goto	 l_000223	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000222: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_000223: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00028a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x42):=176(0xB0)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x3C            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x42            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000234	 	  ; (OP_GOTO, ifEnd)
          movf	 0x3D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x43            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000234	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf3:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; buf3(0x3C):=128(0x80)
          movwf	 0x3C            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf3(0x3C):=128(0x80)
          clrf	 0x3D            	  ; (OP_CLRF, addr + i, 0, comment) ; buf3(0x3C):=128(0x80)
i_000233: goto	 l_000281	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf3 0
    ; CopyRegToReg
l_000234: movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00024c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00024c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00024c: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000251	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_000250: goto	 l_000253	 	  ; (OP_GOTO, isEnd)
l_000251: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_000253: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000256	 	  ; (OP_GOTO, ifThen)
i_000255: goto	 l_00025a	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf3:=0x20(32)
    ; CopyLitToReg
l_000256: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf3(0x3C):=32(0x20)
          movwf	 0x3C            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf3(0x3C):=32(0x20)
          clrf	 0x3D            	  ; (OP_CLRF, addr + i, 0, comment) ; buf3(0x3C):=32(0x20)
i_000259: goto	 l_000281	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf3 129
    ; CopyRegToReg
l_00025a: movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000273	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000273	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000273: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000278	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_000277: goto	 l_00027a	 	  ; (OP_GOTO, isEnd)
l_000278: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_00027a: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00027d	 	  ; (OP_GOTO, ifThen)
i_00027c: goto	 l_00027e	 	  ; (OP_GOTO, ifEnd)
l_00027d: goto	 l_000281	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL buf3:=0x20(32)
    ; CopyLitToReg
l_00027e: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf3(0x3C):=32(0x20)
          movwf	 0x3C            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf3(0x3C):=32(0x20)
          clrf	 0x3D            	  ; (OP_CLRF, addr + i, 0, comment) ; buf3(0x3C):=32(0x20)
    ; Scratch0:1 := Index 'buf3'
    ; CopyRegToReg
l_000281: movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf3
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x42            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x43            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_00028a: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00028b: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00028f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_00028f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000293	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x2(2)
    ; CopyLitToReg
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=2(0x2)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=2(0x2)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 8 =======
    ; INT_SET_BIT $rung_top
l_000293: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00029e	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          movf	 0x34            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x27            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00029d	 	  ; (OP_GOTO, ifThen)
i_00029c: goto	 l_00029e	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_00029d: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_00029e: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000305	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x42):=176(0xB0)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x3E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x42            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002af	 	  ; (OP_GOTO, ifEnd)
          movf	 0x3F            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x43            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0002af	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf2:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; buf2(0x3E):=128(0x80)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf2(0x3E):=128(0x80)
          clrf	 0x3F            	  ; (OP_CLRF, addr + i, 0, comment) ; buf2(0x3E):=128(0x80)
i_0002ae: goto	 l_0002fc	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf2 0
    ; CopyRegToReg
l_0002af: movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002c7	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002c7	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002c7: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002cc	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_0002cb: goto	 l_0002ce	 	  ; (OP_GOTO, isEnd)
l_0002cc: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_0002ce: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002d1	 	  ; (OP_GOTO, ifThen)
i_0002d0: goto	 l_0002d5	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf2:=0x20(32)
    ; CopyLitToReg
l_0002d1: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf2(0x3E):=32(0x20)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf2(0x3E):=32(0x20)
          clrf	 0x3F            	  ; (OP_CLRF, addr + i, 0, comment) ; buf2(0x3E):=32(0x20)
i_0002d4: goto	 l_0002fc	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf2 129
    ; CopyRegToReg
l_0002d5: movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002ee	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002ee	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002ee: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002f3	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_0002f2: goto	 l_0002f5	 	  ; (OP_GOTO, isEnd)
l_0002f3: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_0002f5: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002f8	 	  ; (OP_GOTO, ifThen)
i_0002f7: goto	 l_0002f9	 	  ; (OP_GOTO, ifEnd)
l_0002f8: goto	 l_0002fc	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL buf2:=0x20(32)
    ; CopyLitToReg
l_0002f9: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf2(0x3E):=32(0x20)
          movwf	 0x3E            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf2(0x3E):=32(0x20)
          clrf	 0x3F            	  ; (OP_CLRF, addr + i, 0, comment) ; buf2(0x3E):=32(0x20)
    ; Scratch0:1 := Index 'buf2'
    ; CopyRegToReg
l_0002fc: movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x3F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x42            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x43            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_000305: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000306: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00030a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_00030a: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00030e	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x4(4)
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=4(0x4)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=4(0x4)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 9 =======
    ; INT_SET_BIT $rung_top
l_00030e: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000319	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 4
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 4
          movf	 0x34            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x27            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000318	 	  ; (OP_GOTO, ifThen)
i_000317: goto	 l_000319	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000318: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_000319: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000380	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x42):=176(0xB0)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x42):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x40            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x42            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00032a	 	  ; (OP_GOTO, ifEnd)
          movf	 0x41            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x43            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00032a	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf1:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; buf1(0x40):=128(0x80)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf1(0x40):=128(0x80)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; buf1(0x40):=128(0x80)
i_000329: goto	 l_000377	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf1 0
    ; CopyRegToReg
l_00032a: movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000342	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000342	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000342: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000347	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_000346: goto	 l_000349	 	  ; (OP_GOTO, isEnd)
l_000347: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_000349: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00034c	 	  ; (OP_GOTO, ifThen)
i_00034b: goto	 l_000350	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL buf1:=0x20(32)
    ; CopyLitToReg
l_00034c: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf1(0x40):=32(0x20)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf1(0x40):=32(0x20)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; buf1(0x40):=32(0x20)
i_00034f: goto	 l_000377	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES buf1 129
    ; CopyRegToReg
l_000350: movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x21            , 2	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000369	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000369	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 2	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000369: btfss	 0x21            , 2	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00036e	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest)
i_00036d: goto	 l_000370	 	  ; (OP_GOTO, isEnd)
l_00036e: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest)
l_000370: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000373	 	  ; (OP_GOTO, ifThen)
i_000372: goto	 l_000374	 	  ; (OP_GOTO, ifEnd)
l_000373: goto	 l_000377	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL buf1:=0x20(32)
    ; CopyLitToReg
l_000374: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; buf1(0x40):=32(0x20)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; buf1(0x40):=32(0x20)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; buf1(0x40):=32(0x20)
    ; Scratch0:1 := Index 'buf1'
    ; CopyRegToReg
l_000377: movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; buf1
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x42            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x43            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTB := $scratch
    ; CopyRegToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x06            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTB
l_000380: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000381: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000385	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x0(0)
    ; CopyLitToReg
          clrf	 0x07            	  ; (OP_CLRF, addr + i, 0, comment) ; #PORTC(0x7):=0(0x0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
l_000385: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000389	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL #PORTC:=0x8(8)
    ; CopyLitToReg
          movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; #PORTC(0x7):=8(0x8)
          movwf	 0x07            	  ; (OP_MOVWF, addr + i, 0, comment) ; #PORTC(0x7):=8(0x8)
    ; ] finish parallel
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
l_000389: goto	 l_0000bf	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_00038a: goto	 l_00038a	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 32
;|  0 | #PORTB                                            	|   1 byte  | 0x0006       |
;|  1 | #PORTC                                            	|   1 byte  | 0x0007       |
;|  2 | #TRISB                                            	|   1 byte  | 0x0086       |
;|  3 | #TRISC                                            	|   1 byte  | 0x0087       |
;|  4 | $scratch                                          	|   2 byte  | 0x0042       |
;|  5 | C0                                                	|   1 byte  | 0x0034       |
;| 10 | T0                                                	|   1 byte  | 0x0035       |
;| 15 | buf0                                              	|   2 byte  | 0x0038       |
;| 16 | buf1                                              	|   2 byte  | 0x0040       |
;| 17 | buf2                                              	|   2 byte  | 0x003E       |
;| 18 | buf3                                              	|   2 byte  | 0x003C       |
;| 19 | buf4                                              	|   2 byte  | 0x003A       |
;| 20 | char                                              	|   2 byte  | 0x0036       |
;| 21 | char7seg                                          	| 129 byte  | 0x0008       |

;|Internal Relays: 11
;|  0 | $once_0_INIT_VARS                                 	|   1 bit   | 0x0020       | 0     |
;|  1 | $rung_top                                         	|   1 bit   | 0x0020       | 1     |
;|  2 | $once_1_TCY_T0                                    	|   1 bit   | 0x0020       | 2     |
;|  3 | $once_2_ONE_SHOT_RISING_                          	|   1 bit   | 0x0020       | 3     |
;|  4 | $once_3_CTC_C0                                    	|   1 bit   | 0x0020       | 4     |
;|  5 | Ready                                             	|   1 bit   | 0x0020       | 5     |
;|  6 | $parOut_0                                         	|   1 bit   | 0x0020       | 6     |
;|  7 | $parThis_0                                        	|   1 bit   | 0x0020       | 7     |
;|  8 | $once_4_SHIFT_REGISTER_buf                        	|   1 bit   | 0x0021       | 0     |
;|  9 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0021       | 1     |
;| 10 | $overflow                                         	|   1 bit   | 0x0021       | 2     |

